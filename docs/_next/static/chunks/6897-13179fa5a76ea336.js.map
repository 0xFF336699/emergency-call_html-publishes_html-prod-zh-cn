{"version":3,"file":"static/chunks/6897-13179fa5a76ea336.js","mappings":"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","sources":["webpack://_N_E/../../libs/im/livekit/src/livekit-meeting/trackUtils.ts","webpack://_N_E/../../libs/im/livekit/src/livekit-meeting/MeetingRoom.tsx"],"sourcesContent":["import {\n    createLocalAudioTrack,\n    createLocalVideoTrack,\n    LocalAudioTrack,\n    LocalVideoTrack\n} from 'livekit-client';\n\n/**\n * 安全创建本地轨道的工具函数\n * 支持条件创建和错误容错，避免单个轨道失败导致整体失败\n */\nexport interface CreateLocalTracksOptions {\n    initialAudioEnabled: boolean;\n    initialVideoEnabled: boolean;\n    audioConfig?: {\n        echoCancellation?: boolean;\n        noiseSuppression?: boolean;\n        autoGainControl?: boolean;\n    };\n    videoConfig?: {\n        width?: number;\n        height?: number;\n        frameRate?: number;\n    };\n}\n\nexport interface CreateLocalTracksResult {\n    audioTrack: LocalAudioTrack | null;\n    videoTrack: LocalVideoTrack | null;\n}\n\nexport const createLocalTracksSafely = async (\n    options: CreateLocalTracksOptions\n): Promise<CreateLocalTracksResult> => {\n    const {\n        initialAudioEnabled,\n        initialVideoEnabled,\n        audioConfig = {\n            echoCancellation: true,\n            noiseSuppression: true,\n            autoGainControl: true,\n        },\n        videoConfig = {\n            width: 1280,\n            height: 720,\n            frameRate: 24,\n        }\n    } = options;\n\n    console.log('开始安全创建本地轨道 - audio:', initialAudioEnabled, 'video:', initialVideoEnabled);\n\n    try {\n        const results = await Promise.allSettled([\n            // 音频轨道创建\n            initialAudioEnabled \n                ? createLocalAudioTrack(audioConfig)\n                : Promise.resolve(null),\n            // 视频轨道创建  \n            initialVideoEnabled \n                ? createLocalVideoTrack({ resolution: videoConfig })\n                : Promise.resolve(null),\n        ]);\n        \n        const audioTrack = results[0].status === 'fulfilled' ? results[0].value : null;\n        const videoTrack = results[1].status === 'fulfilled' ? results[1].value : null;\n        \n        // 记录轨道创建结果\n        if (initialAudioEnabled) {\n            if (results[0].status === 'rejected') {\n                console.error('音频轨道创建失败:', results[0].reason);\n                console.warn('音频设备不可用，会议将以静音模式继续');\n            } else {\n                console.log('音频轨道创建成功');\n            }\n        }\n        \n        if (initialVideoEnabled) {\n            if (results[1].status === 'rejected') {\n                console.error('视频轨道创建失败:', results[1].reason);\n                console.warn('视频设备不可用，会议将以音频模式继续');\n            } else {\n                console.log('视频轨道创建成功');\n            }\n        }\n        \n        // 至少要有一个轨道成功，否则抛出错误\n        if (!audioTrack && !videoTrack && (initialAudioEnabled || initialVideoEnabled)) {\n            throw new Error('无法创建任何媒体轨道，请检查设备权限和可用性');\n        }\n        \n        return { audioTrack, videoTrack };\n        \n    } catch (error) {\n        console.error('创建本地轨道完全失败:', error);\n        throw error;\n    }\n};\n\n/**\n * 安全发布轨道到房间\n */\nexport const publishTracksSafely = async (\n    room: any,\n    audioTrack: LocalAudioTrack | null,\n    videoTrack: LocalVideoTrack | null\n) => {\n    const publishPromises = [];\n    \n    if (audioTrack) {\n        publishPromises.push(room.localParticipant.publishTrack(audioTrack));\n        console.log('发布音频轨道');\n    }\n    \n    if (videoTrack) {\n        publishPromises.push(room.localParticipant.publishTrack(videoTrack));\n        console.log('发布视频轨道');\n    }\n    \n    if (publishPromises.length > 0) {\n        await Promise.all(publishPromises);\n        console.log('轨道发布完成');\n    } else {\n        console.warn('没有轨道需要发布');\n    }\n};\n\n/**\n * 安全设置轨道初始状态\n */\nexport const setInitialTrackStates = async (\n    audioTrack: LocalAudioTrack | null,\n    videoTrack: LocalVideoTrack | null,\n    initialAudioEnabled: boolean,\n    initialVideoEnabled: boolean\n) => {\n    if (audioTrack && !initialAudioEnabled) {\n        await audioTrack.mute();\n        console.log('音频轨道已静音');\n    }\n    \n    if (videoTrack && !initialVideoEnabled) {\n        await videoTrack.mute();\n        console.log('视频轨道已关闭');\n    }\n};","import React, {\r\n    useCallback,\r\n    useEffect,\r\n    useRef,\r\n    useState,\r\n    forwardRef,\r\n    ForwardedRef\r\n} from 'react';\r\nimport {\r\n    Room,\r\n    RoomEvent,\r\n    Participant,\r\n    RemoteParticipant,\r\n    RemoteTrack,\r\n    Track,\r\n    LocalTrack,\r\n    LocalVideoTrack,\r\n    LocalAudioTrack,\r\n    createLocalAudioTrack,\r\n    createLocalVideoTrack,\r\n    VideoPreset,\r\n    VideoPresets,\r\n    TrackPublication,\r\n    LocalParticipant\r\n} from 'livekit-client';\r\nimport { createLocalTracksSafely, publishTracksSafely, setInitialTrackStates } from './trackUtils';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Typography,\r\n    Alert,\r\n    IconButton,\r\n    CircularProgress,\r\n    Stack,\r\n    SxProps,\r\n    Theme\r\n} from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\nimport {\r\n    Mic as MicIcon,\r\n    MicOff as MicOffIcon,\r\n    ScreenShare as ScreenShareIcon,\r\n    StopScreenShare as StopScreenShareIcon,\r\n    Videocam as VideoIcon,\r\n    VideocamOff as VideoOffIcon,\r\n    CallEnd as CallEndIcon,\r\n    Settings as SettingsIcon,\r\n    VolumeUp as VolumeUpIcon,\r\n    VolumeOff as VolumeOffIcon,\r\n    Fullscreen as FullscreenIcon,\r\n    FullscreenExit as FullscreenExitIcon,\r\n    Refresh as RefreshIcon,\r\n    Visibility as VisibilityIcon,\r\n    VisibilityOff as VisibilityOffIcon\r\n} from '@mui/icons-material';\r\nimport { Log } from '@fanfanlo';\r\n// import { mainModel } from '@src/libs/mc/main/MainModel';\r\nimport { MeetingRoomProps, VideoPresetConfig, ExtendedParticipantState, ParticipantState } from './meeting-room.intf';\r\n\r\n// 日志记录器\r\nconst logger = new Log(false, 'livekit-meeting.MeetingRoom');\r\nconst uiLogger = logger.sub(false, 'MeetingRoom_ui');\r\n\r\n// 视频预设\r\nconst VIDEO_PRESET: VideoPresetConfig = {\r\n    width: 1280,\r\n    height: 720,\r\n    // @ts-ignore - frameRate is used by LiveKit internally\r\n    frameRate: 24,\r\n    maxBitrate: 3000 * 1000, // 3Mbps\r\n};\r\n\r\n// 类型定义已移至 meetint-room.intf.ts\r\n\r\n\r\n// function getTokenEndpoint(): string {\r\n//     if (!mainModel.appConfig?.livekit?.jwt) {\r\n//         throw new Error('LiveKit JWT endpoint is not configured');\r\n//     }\r\n//     return `${mainModel.appConfig.livekit.jwt}/token`;\r\n// }\r\n// 主组件实现\r\nfunction MeetingRoomComponent(\r\n    {\r\n        livekitConfig,\r\n        roomName,\r\n        userName,\r\n        role = 'initiator',\r\n        onDisconnect,\r\n        onError,\r\n        className = '',\r\n        style,\r\n        sx,\r\n        directly = false,\r\n        initialVideoEnabled = true,\r\n        initialAudioEnabled = true,\r\n    }: MeetingRoomProps,\r\n    ref: ForwardedRef<HTMLDivElement>\r\n) {\r\n    // 全局音视频控制状态\r\n    const [globalMediaState, setGlobalMediaState] = useState<{\r\n        isAudioEnabled: boolean;\r\n        isVideoEnabled: boolean;\r\n    }>({\r\n        isAudioEnabled: initialAudioEnabled,\r\n        isVideoEnabled: initialVideoEnabled,\r\n    });\r\n\r\n    // Refs\r\n    const roomRef = useRef<Room | null>(null);\r\n    const localTracksRef = useRef<LocalTrack[]>([]);\r\n    const videoElements = useRef<Record<string, HTMLVideoElement>>({});\r\n    const audioElements = useRef<Record<string, HTMLAudioElement>>({});\r\n    const [participantStates, setParticipantStates] = useState<Record<string, ExtendedParticipantState>>({});\r\n    const isUnmountedRef = useRef(false);\r\n\r\n    // State\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n    const [hasConnected, setHasConnected] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [isMuted, setIsMuted] = useState(!initialAudioEnabled);\r\n    const [isVideoEnabled, setIsVideoEnabled] = useState(initialVideoEnabled);\r\n    const [participants, setParticipants] = useState<RemoteParticipant[]>([]);\r\n\r\n    // 获取 token\r\n    const fetchToken = useCallback(async (roomName: string, identity: string) => {\r\n        try {\r\n            const response = await fetch(`${livekitConfig.jwt}/token`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    room_name: roomName,\r\n                    identity,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('获取 token 失败');\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data.token;\r\n        } catch (error) {\r\n            uiLogger.error('获取 token 失败:', error);\r\n            throw error;\r\n        }\r\n    }, []);\r\n\r\n    // 连接到房间\r\n    const connectToRoom = useCallback(async () => {\r\n        if (isConnecting || hasConnected) return;\r\n\r\n        setIsConnecting(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // 1. 获取 token\r\n            const token = await fetchToken(roomName, userName);\r\n            uiLogger.log('token:', token);\r\n\r\n            // 2. 创建本地轨道\r\n            const { audioTrack, videoTrack } = await createLocalTracks();\r\n            localTracksRef.current = [audioTrack, videoTrack].filter(track => track !== null);\r\n            uiLogger.log('audioTrack:', audioTrack);\r\n            uiLogger.log('videoTrack:', videoTrack);\r\n            // 3. 创建房间连接\r\n            const room = new Room({\r\n                adaptiveStream: true,\r\n                dynacast: true,\r\n                videoCaptureDefaults: {\r\n                    resolution: VIDEO_PRESET,\r\n                },\r\n                // @ts-ignore - publishDefaults is a valid option\r\n                publishDefaults: {\r\n                    dtx: true,\r\n                    red: true,\r\n                    forceStereo: false,\r\n                    simulcast: true,\r\n                } as any, // Type assertion to bypass type checking for now\r\n            });\r\n            uiLogger.log('room:', room);\r\n            // 4. 设置事件监听\r\n            setupRoomListeners(room);\r\n\r\n            // 5. 连接到房间\r\n            await room.connect(\r\n                livekitConfig.wsUrl,\r\n                token,\r\n                {\r\n                    autoSubscribe: true,\r\n                }\r\n            );\r\n            uiLogger.log('room connected');\r\n            // 6. 安全发布轨道\r\n            try {\r\n                await publishTracksSafely(room, audioTrack, videoTrack);\r\n\r\n                // 7. 安全设置轨道初始状态\r\n                await setInitialTrackStates(audioTrack, videoTrack, initialAudioEnabled, initialVideoEnabled);\r\n            } catch (publishError) {\r\n                uiLogger.error('发布轨道失败:', publishError);\r\n                // 即使发布失败也继续，因为可能已经有其他参与者发布了相同的轨道\r\n            }\r\n\r\n            // 8. 更新引用和状态\r\n            roomRef.current = room;\r\n            setHasConnected(true);\r\n\r\n            // 9. 添加现有远程参与者到状态\r\n            const remoteParticipants = Array.from(room.remoteParticipants.values());\r\n            setParticipants(remoteParticipants);\r\n\r\n            // 10. 更新本地参与者状态\r\n            updateParticipantState(room.localParticipant.identity, {\r\n                isAudioEnabled: initialAudioEnabled,\r\n                isVideoEnabled: initialVideoEnabled,\r\n                audioTrack,\r\n                videoTrack,\r\n            });\r\n\r\n            // 10. 为现有远程参与者设置轨道\r\n            remoteParticipants.forEach(participant => {\r\n                // 初始化远程参与者状态\r\n                initParticipantState(participant);\r\n                uiLogger.log('已初始化远程参与者状态:', participant.identity);\r\n                \r\n                // 使用 getTrackPublications 获取所有轨道发布\r\n                participant.getTrackPublications().forEach(publication => {\r\n                    if (publication.track && publication.track instanceof RemoteTrack) {\r\n                        handleTrackSubscribed(publication.track, publication, participant);\r\n                    }\r\n                });\r\n            });\r\n            \r\n            // 初始化本地参与者状态\r\n            if (room.localParticipant) {\r\n                initParticipantState(room.localParticipant);\r\n                uiLogger.log('已初始化本地参与者状态:', room.localParticipant.identity);\r\n            }\r\n\r\n            uiLogger.log('成功加入会议');\r\n\r\n        } catch (error) {\r\n            uiLogger.error('连接房间失败啦:', error);\r\n            setError('加入会议失败，请检查网络和权限设置');\r\n            // 发生错误时清理资源\r\n            cleanupTracks(localTracksRef.current);\r\n            localTracksRef.current = [];\r\n\r\n            if (roomRef.current) {\r\n                try {\r\n                    await roomRef.current.disconnect();\r\n                } catch (e) {\r\n                    uiLogger.error('断开连接时出错:', e);\r\n                }\r\n                roomRef.current = null;\r\n            }\r\n        } finally {\r\n            setIsConnecting(false);\r\n        }\r\n    }, [roomName, userName, isConnecting, hasConnected, fetchToken, initialAudioEnabled, initialVideoEnabled]);\r\n\r\n    // 创建本地音视频轨道 - 使用安全创建工具\r\n    const createLocalTracks = useCallback(async () => {\r\n        return await createLocalTracksSafely({\r\n            initialAudioEnabled,\r\n            initialVideoEnabled\r\n        });\r\n    }, [initialAudioEnabled, initialVideoEnabled]);\r\n\r\n    // 清理轨道\r\n    const cleanupTracks = useCallback((tracks: LocalTrack[]) => {\r\n        tracks.forEach(track => {\r\n            track.stop();\r\n            track.detach();\r\n        });\r\n    }, []);\r\n\r\n    // 跟踪已处理的轨道元素\r\n    const trackElementsRef = useRef<Record<string, boolean>>({});\r\n    const videoElementsRef = useRef<Record<string, HTMLVideoElement>>({});\r\n    const audioElementsRef = useRef<Record<string, HTMLAudioElement>>({});\r\n\r\n    // 更新参与者状态\r\n    const updateParticipantState = useCallback((identity: string, state: Partial<ParticipantState>) => {\r\n        setParticipantStates(prev => ({\r\n            ...prev,\r\n            [identity]: {\r\n                ...(prev[identity] || {\r\n                    isAudioEnabled: true,\r\n                    isVideoEnabled: true,\r\n                    isAudioEnabledGlobal: true,\r\n                    isVideoEnabledGlobal: true,\r\n                }),\r\n                ...state,\r\n            },\r\n        }));\r\n    }, []);\r\n    // 处理轨道订阅\r\n    const handleTrackSubscribed = useCallback((\r\n        track: RemoteTrack,\r\n        publication: TrackPublication,\r\n        participant: Participant\r\n    ) => {\r\n        if (!track) return () => { };\r\n\r\n        const { identity } = participant;\r\n        const isVideoTrack = track.kind === Track.Kind.Video;\r\n\r\n        uiLogger.log(`处理 ${track.kind} 轨道订阅:`, identity, track);\r\n\r\n        // 更新轨道状态的函数\r\n        const updateTrackState = () => {\r\n            const isMuted = track.isMuted;\r\n            const stateUpdate: Partial<ParticipantState> = {};\r\n\r\n            if (track.kind === Track.Kind.Audio) {\r\n                stateUpdate.isAudioEnabled = !isMuted;\r\n            } else if (track.kind === Track.Kind.Video) {\r\n                stateUpdate.isVideoEnabled = !isMuted;\r\n            }\r\n\r\n            updateParticipantState(identity, stateUpdate);\r\n\r\n            // 强制触发重新渲染以确保 ParticipantVideo 组件更新\r\n            if (isVideoTrack) {\r\n                setParticipants(prev => [...prev]);\r\n            }\r\n        };\r\n\r\n        // 监听轨道静音/取消静音事件\r\n        track.on('muted', updateTrackState);\r\n        track.on('unmuted', updateTrackState);\r\n\r\n        // 初始状态更新\r\n        updateTrackState();\r\n\r\n        // 强制更新参与者列表以触发重新渲染\r\n        // 这确保了即使没有状态变化，组件也会检查新的轨道\r\n        setParticipants(prev => {\r\n            const participantExists = prev.some(p => p.identity === identity);\r\n            if (!participantExists) {\r\n                return [...prev, participant as RemoteParticipant];\r\n            }\r\n            return [...prev];\r\n        });\r\n\r\n\r\n        // 清理函数\r\n        return () => {\r\n            track.off('muted', updateTrackState);\r\n            track.off('unmuted', updateTrackState);\r\n        };\r\n    }, [updateParticipantState]);\r\n\r\n    // 设置房间事件监听\r\n    const setupRoomListeners = useCallback((room: Room) => {\r\n        // 保存所有事件处理函数引用，以便后续清理\r\n        type EventHandler = (...args: any[]) => void;\r\n        const eventHandlers: Record<string, EventHandler> = {\r\n            // 处理远程参与者连接\r\n            participantConnected: (participant: RemoteParticipant) => {\r\n                if (!(participant instanceof RemoteParticipant)) return;\r\n\r\n                uiLogger.log('远程参与者已连接:', participant.identity);\r\n\r\n                // 添加新参与者到状态（使用函数式更新确保不重复添加）\r\n                setParticipants(prev => {\r\n                    // 如果已经存在该参与者，则返回原数组\r\n                    if (prev.some(p => p.identity === participant.identity)) {\r\n                        return prev;\r\n                    }\r\n                    return [...prev, participant];\r\n                });\r\n\r\n                // 监听参与者的轨道发布\r\n                const handleTrackPublished = (publication: TrackPublication) => {\r\n                    uiLogger.log('远程参与者发布轨道:', publication.kind, participant.identity);\r\n                    if (publication.track) {\r\n                        handleTrackSubscribed(publication.track as RemoteTrack, publication, participant);\r\n                    } else {\r\n                        publication.once('subscribed', (track: RemoteTrack) => {\r\n                            handleTrackSubscribed(track, publication, participant);\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // 添加轨道发布监听\r\n                participant.on('trackPublished', handleTrackPublished);\r\n\r\n                // 处理已经发布的轨道\r\n                participant.trackPublications.forEach(publication => {\r\n                    if (publication.track) {\r\n                        handleTrackSubscribed(publication.track as RemoteTrack, publication, participant);\r\n                    }\r\n                });\r\n\r\n                // 返回清理函数\r\n                return () => {\r\n                    participant.off('trackPublished', handleTrackPublished);\r\n                };\r\n            },\r\n\r\n            // 处理参与者断开连接\r\n            participantDisconnected: (participant: RemoteParticipant) => {\r\n                uiLogger.log('远程参与者已断开连接:', participant.identity);\r\n                setParticipants(prev => {\r\n                    const newParticipants = prev.filter(p => p.identity !== participant.identity);\r\n                    uiLogger.log('更新后的参与者列表:', newParticipants.map(p => p.identity));\r\n                    return newParticipants;\r\n                });\r\n            },\r\n\r\n            // 处理轨道订阅\r\n            trackSubscribed: (track: RemoteTrack, publication: TrackPublication, participant: Participant) => {\r\n                if (!track) return;\r\n                uiLogger.log('轨道订阅成功:', track.kind, participant.identity);\r\n                // 处理远程轨道订阅\r\n                handleTrackSubscribed(track, publication, participant as RemoteParticipant);\r\n            },\r\n\r\n            disconnected: (reason?: any) => {\r\n                const reasonStr = reason?.toString?.() || '未知原因';\r\n                uiLogger.log('已从房间断开连接，原因:', reasonStr);\r\n                // 更新状态但不调用 handleDisconnect，因为可能是我们主动断开的\r\n                setHasConnected(false);\r\n                setParticipants([]);\r\n                setError(null);\r\n            },\r\n\r\n            reconnecting: () => {\r\n                uiLogger.log('正在重新连接到房间...');\r\n                setError('正在重新连接...');\r\n            },\r\n\r\n            reconnected: () => {\r\n                uiLogger.log('已重新连接到房间');\r\n                setError(null);\r\n            }\r\n        };\r\n\r\n        // 添加事件监听\r\n        room\r\n            .on(RoomEvent.Disconnected, eventHandlers.disconnected)\r\n            .on(RoomEvent.Reconnecting, eventHandlers.reconnecting)\r\n            .on(RoomEvent.Reconnected, eventHandlers.reconnected)\r\n            .on(RoomEvent.ParticipantConnected, eventHandlers.participantConnected)\r\n            .on(RoomEvent.ParticipantDisconnected, eventHandlers.participantDisconnected)\r\n            .on(RoomEvent.TrackSubscribed, eventHandlers.trackSubscribed);\r\n\r\n        // 返回清理函数\r\n        return () => {\r\n            if (!room) return;\r\n            room\r\n                .off(RoomEvent.Disconnected, eventHandlers.disconnected)\r\n                .off(RoomEvent.Reconnecting, eventHandlers.reconnecting)\r\n                .off(RoomEvent.Reconnected, eventHandlers.reconnected)\r\n                .off(RoomEvent.ParticipantConnected, eventHandlers.participantConnected)\r\n                .off(RoomEvent.ParticipantDisconnected, eventHandlers.participantDisconnected)\r\n                .off(RoomEvent.TrackSubscribed, eventHandlers.trackSubscribed);\r\n\r\n            // 确保返回 void\r\n            return undefined;\r\n        };\r\n    }, [handleTrackSubscribed]);\r\n\r\n    // 离开会议\r\n    const leaveMeeting = useCallback(async () => {\r\n        uiLogger.log('正在离开会议...');\r\n        try {\r\n            // 停止所有本地轨道\r\n            cleanupTracks(localTracksRef.current);\r\n\r\n            // 断开房间连接\r\n            if (roomRef.current) {\r\n                await roomRef.current.disconnect();\r\n                roomRef.current = null;\r\n            }\r\n\r\n            // 更新状态\r\n            setHasConnected(false);\r\n            setParticipants([]);\r\n            setError(null);\r\n\r\n            // 清除所有媒体元素\r\n            Object.values(videoElements.current).forEach(el => el && el.remove());\r\n            Object.values(audioElements.current).forEach(el => el && el.remove());\r\n            videoElements.current = {};\r\n            audioElements.current = {};\r\n\r\n            // 调用断开连接回调\r\n            if (onDisconnect) {\r\n                onDisconnect();\r\n            }\r\n\r\n            uiLogger.log('已成功离开会议');\r\n        } catch (error) {\r\n            uiLogger.error('离开会议时出错:', error);\r\n            setError('离开会议时出错，请重试');\r\n        }\r\n    }, [onDisconnect]);\r\n\r\n    // 清理函数\r\n    const cleanup = useCallback(async (isUnmounting = false) => {\r\n        // 如果是组件卸载，设置卸载标志\r\n        if (isUnmounting) {\r\n            isUnmountedRef.current = true;\r\n        }\r\n\r\n        uiLogger.log('执行清理...');\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const audioTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Audio\r\n        ) as LocalAudioTrack | undefined;\r\n        const videoTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Video\r\n        ) as LocalVideoTrack | undefined;\r\n\r\n        try {\r\n            if (audioTrack) {\r\n                await audioTrack.stop();\r\n            }\r\n            if (videoTrack) {\r\n                await videoTrack.stop();\r\n            }\r\n        } catch (error) {\r\n            uiLogger.error('停止轨道失败:', error);\r\n        }\r\n\r\n        // 清理轨道\r\n        cleanupTracks(localTracksRef.current);\r\n        localTracksRef.current = [];\r\n\r\n        // 清理房间\r\n        if (roomRef.current) {\r\n            roomRef.current.disconnect();\r\n            roomRef.current = null;\r\n        }\r\n\r\n        // 清理状态\r\n        setHasConnected(false);\r\n        setParticipants([]);\r\n        setParticipantStates({});\r\n    }, []);\r\n\r\n    // 更新全局媒体状态\r\n    const updateGlobalMediaState = useCallback((audioEnabled: boolean, videoEnabled: boolean) => {\r\n        setGlobalMediaState(prev => ({\r\n            ...prev,\r\n            isAudioEnabled: audioEnabled,\r\n            isVideoEnabled: videoEnabled,\r\n        }));\r\n    }, []);\r\n\r\n    // 切换静音状态（全局控制）\r\n    const toggleMute = useCallback(async () => {\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const audioTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Audio\r\n        ) as LocalAudioTrack | undefined;\r\n\r\n        if (!audioTrack) return;\r\n\r\n        try {\r\n            // 全局按钮基于全局状态进行切换\r\n            const newGlobalAudioState = !globalMediaState.isAudioEnabled;\r\n\r\n            // 同步更新本地麦克风的物理状态\r\n            if (newGlobalAudioState) {\r\n                await audioTrack.unmute();\r\n            } else {\r\n                await audioTrack.mute();\r\n            }\r\n\r\n            // 更新本地UI状态\r\n            setIsMuted(!newGlobalAudioState);\r\n            updateParticipantState(localParticipant.identity, { isAudioEnabled: newGlobalAudioState });\r\n\r\n            // 更新全局音频状态，这将影响所有参与者的有效状态\r\n            updateGlobalMediaState(newGlobalAudioState, globalMediaState.isVideoEnabled);\r\n        } catch (error) {\r\n            uiLogger.error('切换静音状态失败:', error);\r\n            setError('切换麦克风状态失败');\r\n        }\r\n    }, [globalMediaState, updateParticipantState, updateGlobalMediaState]);\r\n\r\n    // 切换视频状态（全局控制）\r\n    const toggleVideo = useCallback(async () => {\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const videoTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Video\r\n        ) as LocalVideoTrack | undefined;\r\n\r\n        if (!videoTrack) return;\r\n\r\n        try {\r\n            // 全局按钮基于全局状态进行切换\r\n            const newGlobalVideoState = !globalMediaState.isVideoEnabled;\r\n\r\n            // 同步更新本地摄像头的物理状态\r\n            if (newGlobalVideoState) {\r\n                await videoTrack.unmute();\r\n            } else {\r\n                await videoTrack.mute();\r\n            }\r\n\r\n            // 更新本地UI状态\r\n            setIsVideoEnabled(newGlobalVideoState);\r\n            updateParticipantState(localParticipant.identity, { isVideoEnabled: newGlobalVideoState });\r\n\r\n            // 更新全局视频状态，这将影响所有参与者的有效状态\r\n            updateGlobalMediaState(globalMediaState.isAudioEnabled, newGlobalVideoState);\r\n        } catch (error) {\r\n            uiLogger.error('切换视频状态失败:', error);\r\n            setError('切换摄像头状态失败');\r\n        }\r\n    }, [globalMediaState, updateParticipantState, updateGlobalMediaState]);\r\n\r\n    // 切换本地静音状态（仅本地tile）\r\n    const handleLocalMuteToggle = useCallback(async () => {\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const audioTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Audio\r\n        ) as LocalAudioTrack | undefined;\r\n\r\n        if (!audioTrack) return;\r\n\r\n        try {\r\n            const newMutedState = !isMuted;\r\n            if (newMutedState) {\r\n                await audioTrack.mute();\r\n            } else {\r\n                await audioTrack.unmute();\r\n            }\r\n\r\n            setIsMuted(newMutedState);\r\n            updateParticipantState(localParticipant.identity, { isAudioEnabled: !newMutedState });\r\n        } catch (error) {\r\n            uiLogger.error('切换本地静音状态失败:', error);\r\n            setError('切换麦克风状态失败');\r\n        }\r\n    }, [isMuted, updateParticipantState]);\r\n\r\n    // 切换本地视频状态（仅本地tile）\r\n    const handleLocalVideoToggle = useCallback(async () => {\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const videoTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Video\r\n        ) as LocalVideoTrack | undefined;\r\n\r\n        if (!videoTrack) return;\r\n\r\n        try {\r\n            const newVideoState = !isVideoEnabled;\r\n            if (newVideoState) {\r\n                await videoTrack.unmute();\r\n            } else {\r\n                await videoTrack.mute();\r\n            }\r\n\r\n            setIsVideoEnabled(newVideoState);\r\n            updateParticipantState(localParticipant.identity, { isVideoEnabled: newVideoState });\r\n        } catch (error) {\r\n            uiLogger.error('切换本地视频状态失败:', error);\r\n            setError('切换摄像头状态失败');\r\n        }\r\n    }, [isVideoEnabled, updateParticipantState]);\r\n\r\n    // 组件卸载时清理资源\r\n    useEffect(() => {\r\n        return () => {\r\n            // 清理资源\r\n            cleanup(true);\r\n        };\r\n    }, []);\r\n\r\n    // 获取参与者状态\r\n    const getParticipantState = useCallback((identity: string): ParticipantState => {\r\n        return participantStates[identity] || {\r\n            isAudioEnabled: true,\r\n            isVideoEnabled: true,\r\n            isAudioEnabledGlobal: true,\r\n            isVideoEnabledGlobal: true,\r\n        };\r\n    }, [participantStates]);\r\n\r\n    // 初始化参与者状态\r\n    const initParticipantState = useCallback((participant: Participant) => {\r\n        const state = getParticipantState(participant.identity);\r\n\r\n        // 更新音频状态\r\n        const audioTrack = participant.getTrackPublications().find(\r\n            pub => pub.kind === Track.Kind.Audio\r\n        )?.track as LocalAudioTrack | undefined;\r\n\r\n        // 更新视频状态\r\n        const videoTrack = participant.getTrackPublications().find(\r\n            pub => pub.kind === Track.Kind.Video\r\n        )?.track as LocalVideoTrack | undefined;\r\n\r\n        updateParticipantState(participant.identity, {\r\n            ...state,\r\n            isAudioEnabled: audioTrack ? !audioTrack.isMuted : false,\r\n            isVideoEnabled: videoTrack ? !videoTrack.isMuted : false\r\n        });\r\n    }, [getParticipantState, updateParticipantState]);\r\n\r\n    // 切换参与者的音频状态\r\n    const handleToggleAudio = useCallback((participant: Participant) => {\r\n        const currentState = participantStates[participant.identity] || {\r\n            isAudioEnabled: true,\r\n            isVideoEnabled: true,\r\n            isAudioEnabledGlobal: true,\r\n            isVideoEnabledGlobal: true,\r\n        };\r\n\r\n        updateParticipantState(participant.identity, {\r\n            ...currentState,\r\n            isAudioEnabled: !currentState.isAudioEnabled\r\n        });\r\n    }, [participantStates, updateParticipantState]);\r\n\r\n    // 切换参与者的视频状态\r\n    const handleToggleVideo = useCallback((participant: Participant) => {\r\n        const currentState = participantStates[participant.identity] || {\r\n            isAudioEnabled: true,\r\n            isVideoEnabled: true,\r\n            isAudioEnabledGlobal: true,\r\n            isVideoEnabledGlobal: true,\r\n        };\r\n\r\n        updateParticipantState(participant.identity, {\r\n            ...currentState,\r\n            isVideoEnabled: !currentState.isVideoEnabled\r\n        });\r\n    }, [participantStates, updateParticipantState]);\r\n\r\n    // 获取参与者的实际媒体状态（考虑全局覆盖）\r\n    const getEffectiveMediaState = useCallback((participantId: string) => {\r\n        const state = participantStates[participantId];\r\n        if (!state) return { isAudioEnabled: true, isVideoEnabled: true };\r\n\r\n        return {\r\n            isAudioEnabled: globalMediaState.isAudioEnabled ? state.isAudioEnabled : false,\r\n            isVideoEnabled: globalMediaState.isVideoEnabled ? state.isVideoEnabled : false,\r\n        };\r\n    }, [globalMediaState, participantStates]);\r\n\r\n    // 参与者视频组件\r\n    const ParticipantVideo = React.memo(({\r\n        participant,\r\n        isLocal,\r\n        isVideoEnabled\r\n    }: {\r\n        participant: Participant;\r\n        isLocal: boolean;\r\n        isVideoEnabled: boolean;\r\n    }) => {\r\n        const videoRef = useRef<HTMLVideoElement>(null);\r\n        const [videoTrack, setVideoTrack] = useState<RemoteTrack | LocalVideoTrack | Track | null>(null);\r\n\r\n        // 处理视频轨道变化\r\n        useEffect(() => {\r\n            if (!participant) return;\r\n\r\n            // 查找现有的视频轨道发布\r\n            const videoPublication = Array.from(participant.trackPublications.values())\r\n                .find(pub => pub.kind === Track.Kind.Video);\r\n\r\n            // 如果轨道已存在，则直接设置\r\n            if (videoPublication && videoPublication.track) {\r\n                setVideoTrack(videoPublication.track);\r\n            }\r\n\r\n            // 当订阅轨道时处理\r\n            const handleTrackSubscribed = (track: Track) => {\r\n                if (track.kind === Track.Kind.Video) {\r\n                    setVideoTrack(track as RemoteTrack | LocalVideoTrack);\r\n                }\r\n            };\r\n\r\n            // 当取消订阅轨道时处理\r\n            const handleTrackUnsubscribed = (track: Track) => {\r\n                if (track.kind === Track.Kind.Video) {\r\n                    setVideoTrack(null);\r\n                }\r\n            };\r\n\r\n            // 添加事件监听\r\n            participant.on(RoomEvent.TrackSubscribed, handleTrackSubscribed);\r\n            participant.on(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\r\n\r\n            // 清理函数\r\n            return () => {\r\n                participant.off(RoomEvent.TrackSubscribed, handleTrackSubscribed);\r\n                participant.off(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\r\n            };\r\n        }, [participant]);\r\n\r\n        // 处理视频元素附加/分离\r\n        useEffect(() => {\r\n            const videoElement = videoRef.current;\r\n            if (!videoElement || !videoTrack) return;\r\n\r\n            // 清理现有视频源\r\n            while (videoElement.firstChild) {\r\n                videoElement.removeChild(videoElement.firstChild);\r\n            }\r\n\r\n            // 附加视频轨道\r\n            if (isVideoEnabled) {\r\n                videoTrack.attach(videoElement);\r\n            }\r\n\r\n            return () => {\r\n                if (videoTrack) {\r\n                    videoTrack.detach(videoElement);\r\n                }\r\n            };\r\n        }, [videoTrack, isVideoEnabled]);\r\n\r\n        return (\r\n            <Box\r\n                sx={{\r\n                    width: '100%',\r\n                    aspectRatio: '16/9',\r\n                    bgcolor: 'grey.800',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    position: 'relative',\r\n                }}\r\n            >\r\n                <video\r\n                    ref={videoRef}\r\n                    autoPlay\r\n                    playsInline\r\n                    muted={isLocal}\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        objectFit: 'cover',\r\n                        display: isVideoEnabled ? 'block' : 'none'\r\n                    }}\r\n                />\r\n                {!isVideoEnabled && (\r\n                    <Box\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                            bottom: 0,\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            bgcolor: 'grey.900',\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                width: 80,\r\n                                height: 80,\r\n                                borderRadius: '50%',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'center',\r\n                                bgcolor: 'primary.main',\r\n                                color: 'white',\r\n                                fontSize: 32,\r\n                                fontWeight: 'bold',\r\n                            }}\r\n                        >\r\n                            {participant.identity.charAt(0).toUpperCase()}\r\n                        </Box>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n        );\r\n    });\r\n\r\n    // 参与者音频组件\r\n    const ParticipantAudio = React.memo(({\r\n        participant,\r\n        isMuted,\r\n    }: {\r\n        participant: Participant;\r\n        isMuted: boolean;\r\n    }) => {\r\n        const audioRef = useRef<HTMLAudioElement>(null);\r\n        const [audioTrack, setAudioTrack] = useState<RemoteTrack | LocalAudioTrack | Track | null>(null);\r\n\r\n        useEffect(() => {\r\n            if (!participant) return;\r\n\r\n            const handleTrackSubscribed = (track: Track) => {\r\n                if (track.kind === Track.Kind.Audio) {\r\n                    setAudioTrack(track as RemoteTrack | LocalAudioTrack);\r\n                }\r\n            };\r\n\r\n            const handleTrackUnsubscribed = (track: Track) => {\r\n                if (track.kind === Track.Kind.Audio) {\r\n                    setAudioTrack(null);\r\n                }\r\n            };\r\n\r\n            // 查找现有的音频轨道\r\n            const audioPublication = Array.from(participant.trackPublications.values())\r\n                .find(pub => pub.kind === Track.Kind.Audio);\r\n\r\n            if (audioPublication && audioPublication.track) {\r\n                setAudioTrack(audioPublication.track);\r\n            }\r\n\r\n            participant.on(RoomEvent.TrackSubscribed, handleTrackSubscribed);\r\n            participant.on(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\r\n\r\n            return () => {\r\n                participant.off(RoomEvent.TrackSubscribed, handleTrackSubscribed);\r\n                participant.off(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\r\n            };\r\n        }, [participant]);\r\n\r\n        useEffect(() => {\r\n            const audioElement = audioRef.current;\r\n            if (audioElement && audioTrack) {\r\n                audioTrack.attach(audioElement);\r\n                // 远程音频默认静音，除非用户手动取消\r\n                audioElement.muted = isMuted;\r\n                return () => {\r\n                    audioTrack.detach(audioElement);\r\n                };\r\n            }\r\n        }, [audioTrack, isMuted]);\r\n\r\n        return <audio ref={audioRef} autoPlay playsInline />;\r\n    });\r\n\r\n    // 渲染参与者\r\n    const renderParticipant = useCallback((participant: Participant, isLocal: boolean) => {\r\n        const effectiveState = getEffectiveMediaState(participant.identity);\r\n\r\n        return (\r\n            <Box\r\n                key={participant.identity}\r\n                sx={{\r\n                    position: 'relative',\r\n                    borderRadius: 2,\r\n                    overflow: 'hidden',\r\n                    bgcolor: 'background.paper',\r\n                    boxShadow: 1,\r\n                }}\r\n            >\r\n                {/* 视频元素 */}\r\n                <ParticipantVideo\r\n                    participant={participant}\r\n                    isLocal={isLocal}\r\n                    isVideoEnabled={effectiveState.isVideoEnabled}\r\n                />\r\n\r\n                {/* 音频元素 */}\r\n                {!isLocal && (\r\n                    <ParticipantAudio\r\n                        participant={participant}\r\n                        isMuted={!effectiveState.isAudioEnabled}\r\n                    />\r\n                )}\r\n\r\n                {/* 控制栏 */}\r\n                <Grid container\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        bottom: 0,\r\n                        left: 0,\r\n                        right: 0,\r\n                        p: 1,\r\n                        bgcolor: 'rgba(0, 0, 0, 0.6)',\r\n                        justifyContent: 'center',\r\n                        gap: 1,\r\n                    }}\r\n                >\r\n                    <Grid item>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            color={effectiveState.isAudioEnabled ? 'primary' : 'error'}\r\n                            onClick={() => handleToggleAudio(participant)}\r\n                        >\r\n                            {effectiveState.isAudioEnabled ? <VolumeUpIcon /> : <VolumeOffIcon />}\r\n                        </IconButton>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            color={effectiveState.isVideoEnabled ? 'primary' : 'error'}\r\n                            onClick={() => handleToggleVideo(participant)}\r\n                        >\r\n                            {effectiveState.isVideoEnabled ? <VisibilityIcon /> : <VisibilityOffIcon />}\r\n                        </IconButton>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"caption\" color=\"white\">\r\n                            {participant.identity} {isLocal && '(你)'}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {/* 本地麦克风控制 */}\r\n                    {isLocal && (\r\n                        <Grid item>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={handleLocalMuteToggle}\r\n                                color={isMuted ? 'error' : 'primary'}\r\n                                sx={{ color: 'white' }}\r\n                                title={isMuted ? '取消静音' : '静音'}\r\n                            >\r\n                                {isMuted ? <MicOffIcon /> : <MicIcon />}\r\n                            </IconButton>\r\n                        </Grid>\r\n                    )}\r\n\r\n                    {/* 本地视频控制 */}\r\n                    {isLocal && (\r\n                        <Grid item>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={handleLocalVideoToggle}\r\n                                color={isVideoEnabled ? 'primary' : 'error'}\r\n                                sx={{ color: 'white' }}\r\n                                title={isVideoEnabled ? '关闭摄像头' : '开启摄像头'}\r\n                            >\r\n                                {isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\r\n                            </IconButton>\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }, [isMuted, isVideoEnabled, getEffectiveMediaState, handleToggleAudio, handleToggleVideo, handleLocalMuteToggle, handleLocalVideoToggle]);\r\n\r\n    // 渲染主界面\r\n    function renderMainContent() {\r\n        // 如果已经连接，显示会议界面\r\n        if (hasConnected && roomRef.current) {\r\n            return (\r\n                <Box className={className} sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\r\n                    <Box sx={{ flex: 1, overflow: 'auto', p: 2 }}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} md={participants.length === 0 ? 12 : 6}>\r\n                                {renderParticipant(roomRef.current.localParticipant, true)}\r\n                            </Grid>\r\n                            {participants.map(function (participant) {\r\n                                return (\r\n                                    <Grid item xs={12} md={6} key={participant.identity}>\r\n                                        {renderParticipant(participant, false)}\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        </Grid>\r\n                    </Box>\r\n                    {/* 底部控制栏 */}\r\n                    <Box sx={{\r\n                        p: 2,\r\n                        borderTop: '1px solid',\r\n                        borderColor: 'divider',\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        gap: 2\r\n                    }}>\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color={!globalMediaState.isAudioEnabled ? 'error' : 'primary'}\r\n                            onClick={toggleMute}\r\n                            startIcon={!globalMediaState.isAudioEnabled ? <MicOffIcon /> : <MicIcon />}\r\n                        >\r\n                            {!globalMediaState.isAudioEnabled ? '取消静音' : '静音'}\r\n                        </Button>\r\n\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color={!globalMediaState.isVideoEnabled ? 'error' : 'primary'}\r\n                            onClick={toggleVideo}\r\n                            startIcon={globalMediaState.isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\r\n                        >\r\n                            {globalMediaState.isVideoEnabled ? '关闭摄像头' : '开启摄像头'}\r\n                        </Button>\r\n\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            onClick={leaveMeeting}\r\n                            startIcon={<CallEndIcon />}\r\n                        >\r\n                            离开会议\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            );\r\n        }\r\n\r\n        // 未连接时显示连接界面\r\n        return (\r\n            <Box className={className} sx={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                p: 3\r\n            }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    准备加入会议\r\n                </Typography>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={connectToRoom}\r\n                    disabled={isConnecting}\r\n                    startIcon={<VideoIcon />}\r\n                    sx={{ mt: 2 }}\r\n                >\r\n                    加入会议\r\n                    {isConnecting && (\r\n                        <CircularProgress\r\n                            size={16}\r\n                            sx={{\r\n                                color: 'inherit',\r\n                                ml: 1\r\n                            }}\r\n                        />\r\n                    )}\r\n                </Button>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    // 统一渲染内容，避免提前 return 导致 hooks 数量不一致\r\n    let content: React.ReactNode;\r\n    if (isConnecting) {\r\n        content = (\r\n            <Box sx={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                height: '100%',\r\n                p: 3\r\n            }}>\r\n                <CircularProgress />\r\n                <Typography variant=\"body1\" sx={{ mt: 2 }}>正在连接会议...</Typography>\r\n            </Box>\r\n        );\r\n    } else if (error) {\r\n        content = (\r\n            <Alert severity=\"error\" sx={{ m: 2 }}>\r\n                <Typography variant=\"body1\">{error}</Typography>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={connectToRoom}\r\n                    startIcon={<RefreshIcon />}\r\n                    sx={{ mt: 1 }}\r\n                >\r\n                    重试连接\r\n                </Button>\r\n            </Alert>\r\n        );\r\n    } else {\r\n        content = renderMainContent();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(directly){\r\n            connectToRoom();\r\n        }\r\n    }, [directly])\r\n    // 渲染组件\r\n    return (\r\n        <Box ref={ref} sx={sx} style={style}>\r\n            {content}\r\n        </Box>\r\n    );\r\n}\r\n\r\n// 使用 forwardRef 导出组件\r\nconst MeetingRoom = forwardRef(MeetingRoomComponent);\r\nMeetingRoom.displayName = 'MeetingRoom';\r\n\r\nexport { MeetingRoom };"],"names":["createLocalAudioTrack","createLocalVideoTrack","createLocalTracksSafely","options","initialAudioEnabled","initialVideoEnabled","audioConfig","echoCancellation","noiseSuppression","autoGainControl","videoConfig","width","height","frameRate","console","log","results","Promise","allSettled","resolve","resolution","audioTrack","status","value","videoTrack","error","reason","warn","Error","publishTracksSafely","room","publishPromises","push","localParticipant","publishTrack","length","all","setInitialTrackStates","mute","React","useCallback","useEffect","useRef","useState","forwardRef","Room","RoomEvent","RemoteParticipant","RemoteTrack","Track","Box","Button","Typography","Alert","IconButton","CircularProgress","Grid","Mic","MicIcon","MicOff","MicOffIcon","Videocam","VideoIcon","VideocamOff","VideoOffIcon","CallEnd","CallEndIcon","VolumeUp","VolumeUpIcon","VolumeOff","VolumeOffIcon","Refresh","RefreshIcon","Visibility","VisibilityIcon","VisibilityOff","VisibilityOffIcon","Log","logger","uiLogger","sub","VIDEO_PRESET","maxBitrate","MeetingRoomComponent","ref","livekitConfig","roomName","userName","role","onDisconnect","onError","className","style","sx","directly","globalMediaState","setGlobalMediaState","isAudioEnabled","isVideoEnabled","roomRef","localTracksRef","videoElements","audioElements","participantStates","setParticipantStates","isUnmountedRef","isConnecting","setIsConnecting","hasConnected","setHasConnected","setError","isMuted","setIsMuted","setIsVideoEnabled","participants","setParticipants","fetchToken","identity","response","fetch","jwt","method","headers","body","JSON","stringify","room_name","ok","data","json","token","connectToRoom","createLocalTracks","current","filter","track","adaptiveStream","dynacast","videoCaptureDefaults","publishDefaults","dtx","red","forceStereo","simulcast","setupRoomListeners","connect","wsUrl","autoSubscribe","publishError","remoteParticipants","Array","from","values","updateParticipantState","forEach","participant","initParticipantState","getTrackPublications","publication","handleTrackSubscribed","cleanupTracks","disconnect","e","tracks","stop","detach","trackElementsRef","videoElementsRef","audioElementsRef","state","prev","isAudioEnabledGlobal","isVideoEnabledGlobal","isVideoTrack","kind","Kind","Video","updateTrackState","stateUpdate","Audio","on","participantExists","some","p","off","eventHandlers","participantConnected","handleTrackPublished","once","trackPublications","participantDisconnected","newParticipants","map","trackSubscribed","disconnected","reasonStr","toString","reconnecting","reconnected","Disconnected","Reconnecting","Reconnected","ParticipantConnected","ParticipantDisconnected","TrackSubscribed","undefined","leaveMeeting","Object","el","remove","cleanup","isUnmounting","find","t","updateGlobalMediaState","audioEnabled","videoEnabled","toggleMute","newGlobalAudioState","unmute","toggleVideo","newGlobalVideoState","handleLocalMuteToggle","newMutedState","handleLocalVideoToggle","newVideoState","getParticipantState","pub","handleToggleAudio","currentState","handleToggleVideo","getEffectiveMediaState","participantId","ParticipantVideo","memo","isLocal","videoRef","setVideoTrack","videoPublication","handleTrackUnsubscribed","TrackUnsubscribed","videoElement","firstChild","removeChild","attach","aspectRatio","bgcolor","display","alignItems","justifyContent","position","video","autoPlay","playsInline","muted","objectFit","top","left","right","bottom","borderRadius","color","fontSize","fontWeight","charAt","toUpperCase","ParticipantAudio","audioRef","setAudioTrack","audioPublication","audioElement","audio","renderParticipant","effectiveState","overflow","boxShadow","container","gap","item","size","onClick","variant","title","renderMainContent","flexDirection","flex","spacing","xs","md","borderTop","borderColor","startIcon","gutterBottom","disabled","mt","ml","content","severity","m","MeetingRoom","displayName"],"sourceRoot":"","ignoreList":[]}