{"version":3,"file":"static/chunks/9489.66bf690675ecf418.js","mappings":"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","sources":["webpack://_N_E/../../libs/fanfanlo/src/map/BaiduMapView.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\r\nimport dynamic from 'next/dynamic';\r\nimport { Location, MapProps } from './map.intf';\r\n\r\nconst defaultCenter: Location = { lng: 116.402544, lat: 39.928216 };\r\nconst defaultZoom = 10;\r\nconst defaultWatchOptions = {\r\n  enableHighAccuracy: true,\r\n  timeout: 5000,\r\n  maximumAge: 0\r\n};\r\n\r\nconst MapWithLoader = dynamic<MapProps>(\r\n  () => import('react-bmapgl').then((mod) => {\r\n    const { Map, MapApiLoaderHOC } = mod;\r\n    const MapComponent: React.FC<MapProps> = (props) => {\r\n      const {\r\n        center = defaultCenter,\r\n        zoom = defaultZoom,\r\n        onDeviceLocationUpdate,\r\n        onLocationError,\r\n        watchPosition = false,\r\n        watchOptions = defaultWatchOptions,\r\n        onCenterChange,\r\n        ...restProps\r\n      } = props;\r\n      const mapRef = useRef<any>(null);\r\n      const geolocationRef = useRef<any>(null);\r\n      const [currentCenter, setCurrentCenter] = useState<Location>(center);\r\n      const [hasLocated, setHasLocated] = useState(false);\r\n      useEffect(() => {\r\n        if (!hasLocated && navigator.geolocation) {\r\n          navigator.geolocation.getCurrentPosition(\r\n            (pos) => {\r\n              const location = {\r\n                lng: pos.coords.longitude,\r\n                lat: pos.coords.latitude,\r\n                accuracy: pos.coords.accuracy,\r\n                timestamp: pos.timestamp || Date.now()\r\n              };\r\n              setCurrentCenter(location);\r\n              setHasLocated(true);\r\n              onDeviceLocationUpdate?.(location);\r\n            },\r\n            (err) => {\r\n              setHasLocated(true);\r\n              onLocationError?.(err);\r\n            }\r\n          );\r\n        }\r\n      }, [hasLocated, onDeviceLocationUpdate, onLocationError]);\r\n      useEffect(() => {\r\n        let watchId: number | null = null;\r\n        if (watchPosition && navigator.geolocation) {\r\n          watchId = navigator.geolocation.watchPosition(\r\n            (pos) => {\r\n              const location = {\r\n                lng: pos.coords.longitude,\r\n                lat: pos.coords.latitude,\r\n                accuracy: pos.coords.accuracy,\r\n                timestamp: pos.timestamp || Date.now()\r\n              };\r\n              onDeviceLocationUpdate?.(location);\r\n            },\r\n            (err) => {\r\n              onLocationError?.(err);\r\n            },\r\n            watchOptions\r\n          );\r\n        }\r\n        return () => {\r\n          if (watchId !== null && navigator.geolocation) {\r\n            navigator.geolocation.clearWatch(watchId);\r\n          }\r\n        };\r\n      }, [watchPosition, onDeviceLocationUpdate, onLocationError, watchOptions]);\r\n      const initMap = (map: any) => {\r\n        if (!map) return;\r\n        mapRef.current = map;\r\n        try {\r\n          geolocationRef.current = new BMapGL.Geolocation();\r\n          const realMap = map.map || map.instance;\r\n          if (realMap) {\r\n            if (realMap.enableScrollWheelZoom) realMap.enableScrollWheelZoom(true);\r\n            if (realMap.enableContinuousZoom) realMap.enableContinuousZoom();\r\n            if (realMap.enableInertialDragging) realMap.enableInertialDragging();\r\n          }\r\n          if (onCenterChange) {\r\n            (realMap || map).addEventListener('moveend', () => {\r\n              const c = (realMap || map).getCenter();\r\n              onCenterChange({ lng: c.lng, lat: c.lat });\r\n            });\r\n          }\r\n        } catch (error) {\r\n          onLocationError?.(error);\r\n        }\r\n      };\r\n      return (\r\n        <Map\r\n          ref={initMap}\r\n          style={{ height: '100%', width: '100%', ...restProps.style }}\r\n          center={new BMapGL.Point(currentCenter.lng, currentCenter.lat)}\r\n          zoom={zoom}\r\n          {...restProps}\r\n        />\r\n      );\r\n    };\r\n    return MapApiLoaderHOC({\r\n      ak: 'MmweUMZxcXOThZUaBuQ2rtKwLNHf1Hix'\r\n    })(MapComponent as any) as any;\r\n  }),\r\n  {\r\n    ssr: false,\r\n    loading: () => (\r\n      <div style={{\r\n        height: '100%',\r\n        width: '100%',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        backgroundColor: '#f5f5f5',\r\n        color: '#666'\r\n      }}>\r\n        地图加载中...\r\n      </div>\r\n    )\r\n  }\r\n);\r\n\r\nexport const BaiduMapView: React.FC<MapProps> = (props) => {\r\n  return <MapWithLoader {...props} />;\r\n}; "],"names":["React","useEffect","useRef","useState","dynamic","defaultCenter","lng","lat","defaultZoom","defaultWatchOptions","enableHighAccuracy","timeout","maximumAge","MapWithLoader","then","mod","Map","MapApiLoaderHOC","MapComponent","props","center","zoom","onDeviceLocationUpdate","onLocationError","watchPosition","watchOptions","onCenterChange","restProps","mapRef","geolocationRef","currentCenter","setCurrentCenter","hasLocated","setHasLocated","navigator","geolocation","getCurrentPosition","pos","location","coords","longitude","latitude","accuracy","timestamp","Date","now","err","watchId","clearWatch","initMap","map","current","BMapGL","Geolocation","realMap","instance","enableScrollWheelZoom","enableContinuousZoom","enableInertialDragging","addEventListener","c","getCenter","error","ref","style","height","width","Point","ak","ssr","loading","div","display","alignItems","justifyContent","backgroundColor","color","BaiduMapView"],"sourceRoot":"","ignoreList":[]}