{"version":3,"file":"static/chunks/pages/join-call-3ba199df1eab9c7c.js","mappings":"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","sources":["webpack://_N_E/../../libs/im/livekit/src/livekit-meeting/MeetingRoom.tsx","webpack://_N_E/./src/pages/join-call/index.tsx","webpack://_N_E/"],"sourcesContent":["import React, {\r\n    useCallback,\r\n    useEffect,\r\n    useRef,\r\n    useState,\r\n    forwardRef,\r\n    ForwardedRef\r\n} from 'react';\r\nimport {\r\n    Room,\r\n    RoomEvent,\r\n    Participant,\r\n    RemoteParticipant,\r\n    RemoteTrack,\r\n    Track,\r\n    LocalTrack,\r\n    LocalVideoTrack,\r\n    LocalAudioTrack,\r\n    createLocalAudioTrack,\r\n    createLocalVideoTrack,\r\n    VideoPreset,\r\n    VideoPresets,\r\n    TrackPublication,\r\n    LocalParticipant\r\n} from 'livekit-client';\r\nimport {\r\n    Box,\r\n    Button,\r\n    Typography,\r\n    Alert,\r\n    IconButton,\r\n    CircularProgress,\r\n    Stack,\r\n    SxProps,\r\n    Theme\r\n} from '@mui/material';\r\nimport Grid from '@mui/material/Grid';\r\nimport {\r\n    Mic as MicIcon,\r\n    MicOff as MicOffIcon,\r\n    ScreenShare as ScreenShareIcon,\r\n    StopScreenShare as StopScreenShareIcon,\r\n    Videocam as VideoIcon,\r\n    VideocamOff as VideoOffIcon,\r\n    CallEnd as CallEndIcon,\r\n    Settings as SettingsIcon,\r\n    VolumeUp as VolumeUpIcon,\r\n    VolumeOff as VolumeOffIcon,\r\n    Fullscreen as FullscreenIcon,\r\n    FullscreenExit as FullscreenExitIcon,\r\n    Refresh as RefreshIcon,\r\n    Visibility as VisibilityIcon,\r\n    VisibilityOff as VisibilityOffIcon\r\n} from '@mui/icons-material';\r\nimport { Log } from '@fanfanlo';\r\n// import { mainModel } from '@src/libs/mc/main/MainModel';\r\nimport { MeetingRoomProps, VideoPresetConfig, ExtendedParticipantState, ParticipantState } from './meeting-room.intf';\r\n\r\n// 日志记录器\r\nconst logger = new Log(false, 'livekit-meeting.MeetingRoom');\r\nconst uiLogger = logger.sub(false, 'MeetingRoom_ui');\r\n\r\n// 视频预设\r\nconst VIDEO_PRESET: VideoPresetConfig = {\r\n    width: 1280,\r\n    height: 720,\r\n    // @ts-ignore - frameRate is used by LiveKit internally\r\n    frameRate: 24,\r\n    maxBitrate: 3000 * 1000, // 3Mbps\r\n};\r\n\r\n// 类型定义已移至 meetint-room.intf.ts\r\n\r\n\r\n// function getTokenEndpoint(): string {\r\n//     if (!mainModel.appConfig?.livekit?.jwt) {\r\n//         throw new Error('LiveKit JWT endpoint is not configured');\r\n//     }\r\n//     return `${mainModel.appConfig.livekit.jwt}/token`;\r\n// }\r\n// 主组件实现\r\nfunction MeetingRoomComponent(\r\n    {\r\n        livekitConfig,\r\n        roomName,\r\n        userName,\r\n        role = 'initiator',\r\n        eventType = 'security',\r\n        canControlMedia = true,\r\n        onDisconnect,\r\n        onError,\r\n        className = '',\r\n        style,\r\n        sx,\r\n        directly = false,\r\n        initialVideoEnabled = true,\r\n        initialAudioEnabled = true,\r\n    }: MeetingRoomProps,\r\n    ref: ForwardedRef<HTMLDivElement>\r\n) {\r\n    // 全局音视频控制状态\r\n    const [globalMediaState, setGlobalMediaState] = useState<{\r\n        isAudioEnabled: boolean;\r\n        isVideoEnabled: boolean;\r\n    }>({\r\n        isAudioEnabled: initialAudioEnabled,\r\n        isVideoEnabled: initialVideoEnabled,\r\n    });\r\n\r\n    // Refs\r\n    const roomRef = useRef<Room | null>(null);\r\n    const localTracksRef = useRef<LocalTrack[]>([]);\r\n    const videoElements = useRef<Record<string, HTMLVideoElement>>({});\r\n    const audioElements = useRef<Record<string, HTMLAudioElement>>({});\r\n    const [participantStates, setParticipantStates] = useState<Record<string, ExtendedParticipantState>>({});\r\n    const isUnmountedRef = useRef(false);\r\n\r\n    // State\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n    const [hasConnected, setHasConnected] = useState(false);\r\n    const [error, setError] = useState<string | null>(null);\r\n    const [isMuted, setIsMuted] = useState(!initialAudioEnabled);\r\n    const [isVideoEnabled, setIsVideoEnabled] = useState(initialVideoEnabled);\r\n    const [participants, setParticipants] = useState<RemoteParticipant[]>([]);\r\n\r\n    // 获取 token\r\n    const fetchToken = useCallback(async (roomName: string, identity: string) => {\r\n        try {\r\n            const response = await fetch(`${livekitConfig.jwt}/token`, {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    room_name: roomName,\r\n                    identity,\r\n                }),\r\n            });\r\n\r\n            if (!response.ok) {\r\n                throw new Error('获取 token 失败');\r\n            }\r\n\r\n            const data = await response.json();\r\n            return data.token;\r\n        } catch (error) {\r\n            uiLogger.error('获取 token 失败:', error);\r\n            throw error;\r\n        }\r\n    }, []);\r\n\r\n    // 连接到房间\r\n    const connectToRoom = useCallback(async () => {\r\n        if (isConnecting || hasConnected) return;\r\n\r\n        setIsConnecting(true);\r\n        setError(null);\r\n\r\n        try {\r\n            // 1. 获取 token\r\n            const token = await fetchToken(roomName, userName);\r\n            uiLogger.log('token:', token);\r\n\r\n            // 2. 创建本地轨道\r\n            const { audioTrack, videoTrack } = await createLocalTracks();\r\n            localTracksRef.current = [audioTrack, videoTrack];\r\n            uiLogger.log('audioTrack:', audioTrack);\r\n            uiLogger.log('videoTrack:', videoTrack);\r\n            // 3. 创建房间连接\r\n            const room = new Room({\r\n                adaptiveStream: true,\r\n                dynacast: true,\r\n                videoCaptureDefaults: {\r\n                    resolution: VIDEO_PRESET,\r\n                },\r\n                // @ts-ignore - publishDefaults is a valid option\r\n                publishDefaults: {\r\n                    dtx: true,\r\n                    red: true,\r\n                    forceStereo: false,\r\n                    simulcast: true,\r\n                } as any, // Type assertion to bypass type checking for now\r\n            });\r\n            uiLogger.log('room:', room);\r\n            // 4. 设置事件监听\r\n            setupRoomListeners(room);\r\n\r\n            // 5. 连接到房间\r\n            await room.connect(\r\n                livekitConfig.wsUrl,\r\n                token,\r\n                {\r\n                    autoSubscribe: true,\r\n                }\r\n            );\r\n            uiLogger.log('room connected');\r\n            uiLogger.log(`连接到房间: ${livekitConfig.jwt}, 房间名: ${roomName}, 身份: ${userName}, 角色: ${role}, 事件类型: ${eventType}`);\r\n            uiLogger.log(`本地参与者身份: ${room.localParticipant.identity}`);\r\n            uiLogger.log(`房间中的远程参与者数量: ${room.remoteParticipants.size}`);\r\n            Array.from(room.remoteParticipants.values()).forEach((participant, index) => {\r\n                uiLogger.log(`远程参与者 ${index + 1}: ${participant.identity}`);\r\n            });\r\n            \r\n            // 6. 发布本地轨道 - 根据事件类型和角色决定发布策略\r\n            const shouldPublishTracks = () => {\r\n                if (eventType === 'medical') {\r\n                    // 医疗呼救：发起者发布音视频，接收者可以选择是否发布\r\n                    return role === 'initiator';\r\n                } else {\r\n                    // 安全呼救：只有发起者发布音视频，接收者只接收\r\n                    return role === 'initiator';\r\n                }\r\n            };\r\n            \r\n            if (shouldPublishTracks()) {\r\n                try {\r\n                    await Promise.all([\r\n                        room.localParticipant.publishTrack(audioTrack),\r\n                        room.localParticipant.publishTrack(videoTrack)\r\n                    ]);\r\n\r\n                    // 7. 根据初始参数设置轨道状态\r\n                    if (!initialAudioEnabled) {\r\n                        await audioTrack.mute();\r\n                    }\r\n                    if (!initialVideoEnabled) {\r\n                        await videoTrack.mute();\r\n                    }\r\n                } catch (publishError) {\r\n                    uiLogger.error('发布轨道失败:', publishError);\r\n                    // 即使发布失败也继续，因为可能已经有其他参与者发布了相同的轨道\r\n                }\r\n            } else {\r\n                // 接收者模式：不发布本地音视频轨道，静音本地轨道但保持接收能力\r\n                uiLogger.log(`${eventType}呼救接收者模式：不发布本地音视频，但保持接收能力`);\r\n                await audioTrack.mute();\r\n                await videoTrack.mute();\r\n            }\r\n\r\n            // 8. 更新引用和状态\r\n            roomRef.current = room;\r\n            setHasConnected(true);\r\n\r\n            // 9. 添加现有远程参与者到状态\r\n            const remoteParticipants = Array.from(room.remoteParticipants.values());\r\n            setParticipants(remoteParticipants);\r\n\r\n            // 10. 更新本地参与者状态\r\n            const shouldPublishTracksForState = shouldPublishTracks();\r\n            updateParticipantState(room.localParticipant.identity, {\r\n                isAudioEnabled: shouldPublishTracksForState ? initialAudioEnabled : false,\r\n                isVideoEnabled: shouldPublishTracksForState ? initialVideoEnabled : false,\r\n                audioTrack: shouldPublishTracksForState ? audioTrack : null,\r\n                videoTrack: shouldPublishTracksForState ? videoTrack : null,\r\n            });\r\n\r\n            // 10. 为现有远程参与者设置轨道\r\n            remoteParticipants.forEach(participant => {\r\n                // 初始化远程参与者状态\r\n                initParticipantState(participant);\r\n                uiLogger.log('已初始化远程参与者状态:', participant.identity);\r\n                \r\n                // 使用 getTrackPublications 获取所有轨道发布\r\n                participant.getTrackPublications().forEach(publication => {\r\n                    if (publication.track && publication.track instanceof RemoteTrack) {\r\n                        handleTrackSubscribed(publication.track, publication, participant);\r\n                    }\r\n                });\r\n            });\r\n            \r\n            // 初始化本地参与者状态\r\n            if (room.localParticipant) {\r\n                initParticipantState(room.localParticipant);\r\n                uiLogger.log('已初始化本地参与者状态:', room.localParticipant.identity);\r\n            }\r\n\r\n            uiLogger.log('成功加入会议');\r\n\r\n        } catch (error) {\r\n            uiLogger.error('连接房间失败啦:', error);\r\n            setError('加入会议失败，请检查网络和权限设置');\r\n            // 发生错误时清理资源\r\n            cleanupTracks(localTracksRef.current);\r\n            localTracksRef.current = [];\r\n\r\n            if (roomRef.current) {\r\n                try {\r\n                    await roomRef.current.disconnect();\r\n                } catch (e) {\r\n                    uiLogger.error('断开连接时出错:', e);\r\n                }\r\n                roomRef.current = null;\r\n            }\r\n        } finally {\r\n            setIsConnecting(false);\r\n        }\r\n    }, [roomName, userName, isConnecting, hasConnected, fetchToken, initialAudioEnabled, initialVideoEnabled]);\r\n\r\n    // 创建本地音视频轨道\r\n    const createLocalTracks = useCallback(async () => {\r\n        try {\r\n            const [audioTrack, videoTrack] = await Promise.all([\r\n                createLocalAudioTrack({\r\n                    echoCancellation: true,\r\n                    noiseSuppression: true,\r\n                    autoGainControl: true,\r\n                }),\r\n                createLocalVideoTrack({\r\n                    resolution: {\r\n                        width: 1280,\r\n                        height: 720,\r\n                        frameRate: 24,\r\n                    },\r\n                }),\r\n            ]);\r\n            return { audioTrack, videoTrack };\r\n        } catch (error) {\r\n            uiLogger.error('创建本地轨道失败:', error);\r\n            throw error;\r\n        }\r\n    }, []);\r\n\r\n    // 清理轨道\r\n    const cleanupTracks = useCallback((tracks: LocalTrack[]) => {\r\n        tracks.forEach(track => {\r\n            track.stop();\r\n            track.detach();\r\n        });\r\n    }, []);\r\n\r\n    // 跟踪已处理的轨道元素\r\n    const trackElementsRef = useRef<Record<string, boolean>>({});\r\n    const videoElementsRef = useRef<Record<string, HTMLVideoElement>>({});\r\n    const audioElementsRef = useRef<Record<string, HTMLAudioElement>>({});\r\n\r\n    // 更新参与者状态\r\n    const updateParticipantState = useCallback((identity: string, state: Partial<ParticipantState>) => {\r\n        setParticipantStates(prev => ({\r\n            ...prev,\r\n            [identity]: {\r\n                ...(prev[identity] || {\r\n                    isAudioEnabled: true,\r\n                    isVideoEnabled: true,\r\n                    isAudioEnabledGlobal: true,\r\n                    isVideoEnabledGlobal: true,\r\n                }),\r\n                ...state,\r\n            },\r\n        }));\r\n    }, []);\r\n    // 处理轨道订阅\r\n    const handleTrackSubscribed = useCallback((\r\n        track: RemoteTrack,\r\n        publication: TrackPublication,\r\n        participant: Participant\r\n    ) => {\r\n        if (!track) return () => { };\r\n\r\n        const { identity } = participant;\r\n        const isVideoTrack = track.kind === Track.Kind.Video;\r\n\r\n        uiLogger.log(`处理 ${track.kind} 轨道订阅:`, identity, track);\r\n\r\n        // 更新轨道状态的函数\r\n        const updateTrackState = () => {\r\n            const isMuted = track.isMuted;\r\n            const stateUpdate: Partial<ParticipantState> = {};\r\n\r\n            if (track.kind === Track.Kind.Audio) {\r\n                stateUpdate.isAudioEnabled = !isMuted;\r\n            } else if (track.kind === Track.Kind.Video) {\r\n                stateUpdate.isVideoEnabled = !isMuted;\r\n            }\r\n\r\n            updateParticipantState(identity, stateUpdate);\r\n\r\n            // 强制触发重新渲染以确保 ParticipantVideo 组件更新\r\n            if (isVideoTrack) {\r\n                setParticipants(prev => [...prev]);\r\n            }\r\n        };\r\n\r\n        // 监听轨道静音/取消静音事件\r\n        track.on('muted', updateTrackState);\r\n        track.on('unmuted', updateTrackState);\r\n\r\n        // 初始状态更新\r\n        updateTrackState();\r\n\r\n        // 强制更新参与者列表以触发重新渲染\r\n        // 这确保了即使没有状态变化，组件也会检查新的轨道\r\n        setParticipants(prev => {\r\n            const participantExists = prev.some(p => p.identity === identity);\r\n            if (!participantExists) {\r\n                return [...prev, participant as RemoteParticipant];\r\n            }\r\n            return [...prev];\r\n        });\r\n\r\n\r\n        // 清理函数\r\n        return () => {\r\n            track.off('muted', updateTrackState);\r\n            track.off('unmuted', updateTrackState);\r\n        };\r\n    }, [updateParticipantState]);\r\n\r\n    // 设置房间事件监听\r\n    const setupRoomListeners = useCallback((room: Room) => {\r\n        // 保存所有事件处理函数引用，以便后续清理\r\n        type EventHandler = (...args: any[]) => void;\r\n        const eventHandlers: Record<string, EventHandler> = {\r\n            // 处理远程参与者连接\r\n            participantConnected: (participant: RemoteParticipant) => {\r\n                if (!(participant instanceof RemoteParticipant)) return;\r\n\r\n                uiLogger.log('远程参与者已连接:', participant.identity);\r\n\r\n                // 添加新参与者到状态（使用函数式更新确保不重复添加）\r\n                setParticipants(prev => {\r\n                    // 如果已经存在该参与者，则返回原数组\r\n                    if (prev.some(p => p.identity === participant.identity)) {\r\n                        return prev;\r\n                    }\r\n                    return [...prev, participant];\r\n                });\r\n\r\n                // 监听参与者的轨道发布\r\n                const handleTrackPublished = (publication: TrackPublication) => {\r\n                    uiLogger.log('远程参与者发布轨道:', publication.kind, participant.identity);\r\n                    if (publication.track) {\r\n                        handleTrackSubscribed(publication.track as RemoteTrack, publication, participant);\r\n                    } else {\r\n                        publication.once('subscribed', (track: RemoteTrack) => {\r\n                            handleTrackSubscribed(track, publication, participant);\r\n                        });\r\n                    }\r\n                };\r\n\r\n                // 添加轨道发布监听\r\n                participant.on('trackPublished', handleTrackPublished);\r\n\r\n                // 处理已经发布的轨道\r\n                participant.trackPublications.forEach(publication => {\r\n                    if (publication.track) {\r\n                        handleTrackSubscribed(publication.track as RemoteTrack, publication, participant);\r\n                    }\r\n                });\r\n\r\n                // 返回清理函数\r\n                return () => {\r\n                    participant.off('trackPublished', handleTrackPublished);\r\n                };\r\n            },\r\n\r\n            // 处理参与者断开连接\r\n            participantDisconnected: (participant: RemoteParticipant) => {\r\n                uiLogger.log('远程参与者已断开连接:', participant.identity);\r\n                setParticipants(prev => {\r\n                    const newParticipants = prev.filter(p => p.identity !== participant.identity);\r\n                    uiLogger.log('更新后的参与者列表:', newParticipants.map(p => p.identity));\r\n                    return newParticipants;\r\n                });\r\n            },\r\n\r\n            // 处理轨道订阅\r\n            trackSubscribed: (track: RemoteTrack, publication: TrackPublication, participant: Participant) => {\r\n                if (!track) return;\r\n                uiLogger.log('轨道订阅成功:', track.kind, participant.identity);\r\n                // 处理远程轨道订阅\r\n                handleTrackSubscribed(track, publication, participant as RemoteParticipant);\r\n            },\r\n\r\n            disconnected: (reason?: any) => {\r\n                const reasonStr = reason?.toString?.() || '未知原因';\r\n                uiLogger.log('已从房间断开连接，原因:', reasonStr);\r\n                // 更新状态但不调用 handleDisconnect，因为可能是我们主动断开的\r\n                setHasConnected(false);\r\n                setParticipants([]);\r\n                setError(null);\r\n            },\r\n\r\n            reconnecting: () => {\r\n                uiLogger.log('正在重新连接到房间...');\r\n                setError('正在重新连接...');\r\n            },\r\n\r\n            reconnected: () => {\r\n                uiLogger.log('已重新连接到房间');\r\n                setError(null);\r\n            }\r\n        };\r\n\r\n        // 添加事件监听\r\n        room\r\n            .on(RoomEvent.Disconnected, eventHandlers.disconnected)\r\n            .on(RoomEvent.Reconnecting, eventHandlers.reconnecting)\r\n            .on(RoomEvent.Reconnected, eventHandlers.reconnected)\r\n            .on(RoomEvent.ParticipantConnected, eventHandlers.participantConnected)\r\n            .on(RoomEvent.ParticipantDisconnected, eventHandlers.participantDisconnected)\r\n            .on(RoomEvent.TrackSubscribed, eventHandlers.trackSubscribed);\r\n\r\n        // 返回清理函数\r\n        return () => {\r\n            if (!room) return;\r\n            room\r\n                .off(RoomEvent.Disconnected, eventHandlers.disconnected)\r\n                .off(RoomEvent.Reconnecting, eventHandlers.reconnecting)\r\n                .off(RoomEvent.Reconnected, eventHandlers.reconnected)\r\n                .off(RoomEvent.ParticipantConnected, eventHandlers.participantConnected)\r\n                .off(RoomEvent.ParticipantDisconnected, eventHandlers.participantDisconnected)\r\n                .off(RoomEvent.TrackSubscribed, eventHandlers.trackSubscribed);\r\n\r\n            // 确保返回 void\r\n            return undefined;\r\n        };\r\n    }, [handleTrackSubscribed]);\r\n\r\n    // 离开会议\r\n    const leaveMeeting = useCallback(async () => {\r\n        uiLogger.log('正在离开会议...');\r\n        try {\r\n            // 停止所有本地轨道\r\n            cleanupTracks(localTracksRef.current);\r\n\r\n            // 断开房间连接\r\n            if (roomRef.current) {\r\n                await roomRef.current.disconnect();\r\n                roomRef.current = null;\r\n            }\r\n\r\n            // 更新状态\r\n            setHasConnected(false);\r\n            setParticipants([]);\r\n            setError(null);\r\n\r\n            // 清除所有媒体元素\r\n            Object.values(videoElements.current).forEach(el => el && el.remove());\r\n            Object.values(audioElements.current).forEach(el => el && el.remove());\r\n            videoElements.current = {};\r\n            audioElements.current = {};\r\n\r\n            // 调用断开连接回调\r\n            if (onDisconnect) {\r\n                onDisconnect();\r\n            }\r\n\r\n            uiLogger.log('已成功离开会议');\r\n        } catch (error) {\r\n            uiLogger.error('离开会议时出错:', error);\r\n            setError('离开会议时出错，请重试');\r\n        }\r\n    }, [onDisconnect]);\r\n\r\n    // 清理函数\r\n    const cleanup = useCallback(async (isUnmounting = false) => {\r\n        // 如果是组件卸载，设置卸载标志\r\n        if (isUnmounting) {\r\n            isUnmountedRef.current = true;\r\n        }\r\n\r\n        uiLogger.log('执行清理...');\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const audioTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Audio\r\n        ) as LocalAudioTrack | undefined;\r\n        const videoTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Video\r\n        ) as LocalVideoTrack | undefined;\r\n\r\n        try {\r\n            if (audioTrack) {\r\n                await audioTrack.stop();\r\n            }\r\n            if (videoTrack) {\r\n                await videoTrack.stop();\r\n            }\r\n        } catch (error) {\r\n            uiLogger.error('停止轨道失败:', error);\r\n        }\r\n\r\n        // 清理轨道\r\n        cleanupTracks(localTracksRef.current);\r\n        localTracksRef.current = [];\r\n\r\n        // 清理房间\r\n        if (roomRef.current) {\r\n            roomRef.current.disconnect();\r\n            roomRef.current = null;\r\n        }\r\n\r\n        // 清理状态\r\n        setHasConnected(false);\r\n        setParticipants([]);\r\n        setParticipantStates({});\r\n    }, []);\r\n\r\n    // 更新全局媒体状态\r\n    const updateGlobalMediaState = useCallback((audioEnabled: boolean, videoEnabled: boolean) => {\r\n        setGlobalMediaState(prev => ({\r\n            ...prev,\r\n            isAudioEnabled: audioEnabled,\r\n            isVideoEnabled: videoEnabled,\r\n        }));\r\n    }, []);\r\n\r\n    // 切换静音状态（全局控制）\r\n    const toggleMute = useCallback(async () => {\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const audioTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Audio\r\n        ) as LocalAudioTrack | undefined;\r\n\r\n        if (!audioTrack) return;\r\n\r\n        try {\r\n            // 全局按钮基于全局状态进行切换\r\n            const newGlobalAudioState = !globalMediaState.isAudioEnabled;\r\n\r\n            // 对于医疗呼救的接收者，如果是第一次开启音频，需要发布轨道\r\n            if (eventType === 'medical' && role === 'responder' && newGlobalAudioState) {\r\n                const isTrackPublished = localParticipant.getTrackPublications().has(audioTrack.sid);\r\n                if (!isTrackPublished) {\r\n                    try {\r\n                        await localParticipant.publishTrack(audioTrack);\r\n                        uiLogger.log('医疗呼救接收者开始发布音频轨道');\r\n                    } catch (publishError) {\r\n                        uiLogger.error('发布音频轨道失败:', publishError);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 同步更新本地麦克风的物理状态\r\n            if (newGlobalAudioState) {\r\n                await audioTrack.unmute();\r\n            } else {\r\n                await audioTrack.mute();\r\n            }\r\n\r\n            // 更新本地UI状态\r\n            setIsMuted(!newGlobalAudioState);\r\n            updateParticipantState(localParticipant.identity, { isAudioEnabled: newGlobalAudioState });\r\n\r\n            // 更新全局音频状态，这将影响所有参与者的有效状态\r\n            updateGlobalMediaState(newGlobalAudioState, globalMediaState.isVideoEnabled);\r\n        } catch (error) {\r\n            uiLogger.error('切换静音状态失败:', error);\r\n            setError('切换麦克风状态失败');\r\n        }\r\n    }, [globalMediaState, updateParticipantState, updateGlobalMediaState, eventType, role]);\r\n\r\n    // 切换视频状态（全局控制）\r\n    const toggleVideo = useCallback(async () => {\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const videoTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Video\r\n        ) as LocalVideoTrack | undefined;\r\n\r\n        if (!videoTrack) return;\r\n\r\n        try {\r\n            // 全局按钮基于全局状态进行切换\r\n            const newGlobalVideoState = !globalMediaState.isVideoEnabled;\r\n\r\n            // 对于医疗呼救的接收者，如果是第一次开启视频，需要发布轨道\r\n            if (eventType === 'medical' && role === 'responder' && newGlobalVideoState) {\r\n                const isTrackPublished = localParticipant.getTrackPublications().has(videoTrack.sid);\r\n                if (!isTrackPublished) {\r\n                    try {\r\n                        await localParticipant.publishTrack(videoTrack);\r\n                        uiLogger.log('医疗呼救接收者开始发布视频轨道');\r\n                    } catch (publishError) {\r\n                        uiLogger.error('发布视频轨道失败:', publishError);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // 同步更新本地摄像头的物理状态\r\n            if (newGlobalVideoState) {\r\n                await videoTrack.unmute();\r\n            } else {\r\n                await videoTrack.mute();\r\n            }\r\n\r\n            // 更新本地UI状态\r\n            setIsVideoEnabled(newGlobalVideoState);\r\n            updateParticipantState(localParticipant.identity, { isVideoEnabled: newGlobalVideoState });\r\n\r\n            // 更新全局视频状态，这将影响所有参与者的有效状态\r\n            updateGlobalMediaState(globalMediaState.isAudioEnabled, newGlobalVideoState);\r\n        } catch (error) {\r\n            uiLogger.error('切换视频状态失败:', error);\r\n            setError('切换摄像头状态失败');\r\n        }\r\n    }, [globalMediaState, updateParticipantState, updateGlobalMediaState, eventType, role]);\r\n\r\n    // 切换本地静音状态（仅本地tile）\r\n    const handleLocalMuteToggle = useCallback(async () => {\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const audioTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Audio\r\n        ) as LocalAudioTrack | undefined;\r\n\r\n        if (!audioTrack) return;\r\n\r\n        try {\r\n            const newMutedState = !isMuted;\r\n            if (newMutedState) {\r\n                await audioTrack.mute();\r\n            } else {\r\n                await audioTrack.unmute();\r\n            }\r\n\r\n            setIsMuted(newMutedState);\r\n            updateParticipantState(localParticipant.identity, { isAudioEnabled: !newMutedState });\r\n        } catch (error) {\r\n            uiLogger.error('切换本地静音状态失败:', error);\r\n            setError('切换麦克风状态失败');\r\n        }\r\n    }, [isMuted, updateParticipantState]);\r\n\r\n    // 切换本地视频状态（仅本地tile）\r\n    const handleLocalVideoToggle = useCallback(async () => {\r\n        if (!roomRef.current) return;\r\n\r\n        const localParticipant = roomRef.current.localParticipant;\r\n        const videoTrack = localTracksRef.current.find(\r\n            t => t.kind === Track.Kind.Video\r\n        ) as LocalVideoTrack | undefined;\r\n\r\n        if (!videoTrack) return;\r\n\r\n        try {\r\n            const newVideoState = !isVideoEnabled;\r\n            if (newVideoState) {\r\n                await videoTrack.unmute();\r\n            } else {\r\n                await videoTrack.mute();\r\n            }\r\n\r\n            setIsVideoEnabled(newVideoState);\r\n            updateParticipantState(localParticipant.identity, { isVideoEnabled: newVideoState });\r\n        } catch (error) {\r\n            uiLogger.error('切换本地视频状态失败:', error);\r\n            setError('切换摄像头状态失败');\r\n        }\r\n    }, [isVideoEnabled, updateParticipantState]);\r\n\r\n    // 组件卸载时清理资源\r\n    useEffect(() => {\r\n        return () => {\r\n            // 清理资源\r\n            cleanup(true);\r\n        };\r\n    }, []);\r\n\r\n    // 获取参与者状态\r\n    const getParticipantState = useCallback((identity: string): ParticipantState => {\r\n        return participantStates[identity] || {\r\n            isAudioEnabled: true,\r\n            isVideoEnabled: true,\r\n            isAudioEnabledGlobal: true,\r\n            isVideoEnabledGlobal: true,\r\n        };\r\n    }, [participantStates]);\r\n\r\n    // 初始化参与者状态\r\n    const initParticipantState = useCallback((participant: Participant) => {\r\n        const state = getParticipantState(participant.identity);\r\n\r\n        // 更新音频状态\r\n        const audioTrack = participant.getTrackPublications().find(\r\n            pub => pub.kind === Track.Kind.Audio\r\n        )?.track as LocalAudioTrack | undefined;\r\n\r\n        // 更新视频状态\r\n        const videoTrack = participant.getTrackPublications().find(\r\n            pub => pub.kind === Track.Kind.Video\r\n        )?.track as LocalVideoTrack | undefined;\r\n\r\n        updateParticipantState(participant.identity, {\r\n            ...state,\r\n            isAudioEnabled: audioTrack ? !audioTrack.isMuted : false,\r\n            isVideoEnabled: videoTrack ? !videoTrack.isMuted : false\r\n        });\r\n    }, [getParticipantState, updateParticipantState]);\r\n\r\n    // 切换参与者的音频状态\r\n    const handleToggleAudio = useCallback((participant: Participant) => {\r\n        const currentState = participantStates[participant.identity] || {\r\n            isAudioEnabled: true,\r\n            isVideoEnabled: true,\r\n            isAudioEnabledGlobal: true,\r\n            isVideoEnabledGlobal: true,\r\n        };\r\n\r\n        updateParticipantState(participant.identity, {\r\n            ...currentState,\r\n            isAudioEnabled: !currentState.isAudioEnabled\r\n        });\r\n    }, [participantStates, updateParticipantState]);\r\n\r\n    // 切换参与者的视频状态\r\n    const handleToggleVideo = useCallback((participant: Participant) => {\r\n        const currentState = participantStates[participant.identity] || {\r\n            isAudioEnabled: true,\r\n            isVideoEnabled: true,\r\n            isAudioEnabledGlobal: true,\r\n            isVideoEnabledGlobal: true,\r\n        };\r\n\r\n        updateParticipantState(participant.identity, {\r\n            ...currentState,\r\n            isVideoEnabled: !currentState.isVideoEnabled\r\n        });\r\n    }, [participantStates, updateParticipantState]);\r\n\r\n    // 获取参与者的实际媒体状态（考虑全局覆盖）\r\n    const getEffectiveMediaState = useCallback((participantId: string) => {\r\n        const state = participantStates[participantId];\r\n        if (!state) return { isAudioEnabled: true, isVideoEnabled: true };\r\n\r\n        return {\r\n            isAudioEnabled: globalMediaState.isAudioEnabled ? state.isAudioEnabled : false,\r\n            isVideoEnabled: globalMediaState.isVideoEnabled ? state.isVideoEnabled : false,\r\n        };\r\n    }, [globalMediaState, participantStates]);\r\n\r\n    // 参与者视频组件\r\n    const ParticipantVideo = React.memo(({\r\n        participant,\r\n        isLocal,\r\n        isVideoEnabled\r\n    }: {\r\n        participant: Participant;\r\n        isLocal: boolean;\r\n        isVideoEnabled: boolean;\r\n    }) => {\r\n        const videoRef = useRef<HTMLVideoElement>(null);\r\n        const [videoTrack, setVideoTrack] = useState<RemoteTrack | LocalVideoTrack | Track | null>(null);\r\n\r\n        // 处理视频轨道变化\r\n        useEffect(() => {\r\n            if (!participant) return;\r\n\r\n            // 查找现有的视频轨道发布\r\n            const videoPublication = Array.from(participant.trackPublications.values())\r\n                .find(pub => pub.kind === Track.Kind.Video);\r\n\r\n            // 如果轨道已存在，则直接设置\r\n            if (videoPublication && videoPublication.track) {\r\n                setVideoTrack(videoPublication.track);\r\n            }\r\n\r\n            // 当订阅轨道时处理\r\n            const handleTrackSubscribed = (track: Track) => {\r\n                if (track.kind === Track.Kind.Video) {\r\n                    setVideoTrack(track as RemoteTrack | LocalVideoTrack);\r\n                }\r\n            };\r\n\r\n            // 当取消订阅轨道时处理\r\n            const handleTrackUnsubscribed = (track: Track) => {\r\n                if (track.kind === Track.Kind.Video) {\r\n                    setVideoTrack(null);\r\n                }\r\n            };\r\n\r\n            // 添加事件监听\r\n            participant.on(RoomEvent.TrackSubscribed, handleTrackSubscribed);\r\n            participant.on(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\r\n\r\n            // 清理函数\r\n            return () => {\r\n                participant.off(RoomEvent.TrackSubscribed, handleTrackSubscribed);\r\n                participant.off(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\r\n            };\r\n        }, [participant]);\r\n\r\n        // 处理视频元素附加/分离\r\n        useEffect(() => {\r\n            const videoElement = videoRef.current;\r\n            if (!videoElement || !videoTrack) return;\r\n\r\n            // 清理现有视频源\r\n            while (videoElement.firstChild) {\r\n                videoElement.removeChild(videoElement.firstChild);\r\n            }\r\n\r\n            // 附加视频轨道\r\n            if (isVideoEnabled) {\r\n                videoTrack.attach(videoElement);\r\n            }\r\n\r\n            return () => {\r\n                if (videoTrack) {\r\n                    videoTrack.detach(videoElement);\r\n                }\r\n            };\r\n        }, [videoTrack, isVideoEnabled]);\r\n\r\n        return (\r\n            <Box\r\n                sx={{\r\n                    width: '100%',\r\n                    aspectRatio: '16/9',\r\n                    bgcolor: 'grey.800',\r\n                    display: 'flex',\r\n                    alignItems: 'center',\r\n                    justifyContent: 'center',\r\n                    position: 'relative',\r\n                }}\r\n            >\r\n                <video\r\n                    ref={videoRef}\r\n                    autoPlay\r\n                    playsInline\r\n                    muted={isLocal}\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '100%',\r\n                        objectFit: 'cover',\r\n                        display: isVideoEnabled ? 'block' : 'none'\r\n                    }}\r\n                />\r\n                {!isVideoEnabled && (\r\n                    <Box\r\n                        sx={{\r\n                            position: 'absolute',\r\n                            top: 0,\r\n                            left: 0,\r\n                            right: 0,\r\n                            bottom: 0,\r\n                            display: 'flex',\r\n                            alignItems: 'center',\r\n                            justifyContent: 'center',\r\n                            bgcolor: 'grey.900',\r\n                        }}\r\n                    >\r\n                        <Box\r\n                            sx={{\r\n                                width: 80,\r\n                                height: 80,\r\n                                borderRadius: '50%',\r\n                                display: 'flex',\r\n                                alignItems: 'center',\r\n                                justifyContent: 'center',\r\n                                bgcolor: 'primary.main',\r\n                                color: 'white',\r\n                                fontSize: 32,\r\n                                fontWeight: 'bold',\r\n                            }}\r\n                        >\r\n                            {participant.identity.charAt(0).toUpperCase()}\r\n                        </Box>\r\n                    </Box>\r\n                )}\r\n            </Box>\r\n        );\r\n    });\r\n\r\n    // 参与者音频组件\r\n    const ParticipantAudio = React.memo(({\r\n        participant,\r\n        isMuted,\r\n    }: {\r\n        participant: Participant;\r\n        isMuted: boolean;\r\n    }) => {\r\n        const audioRef = useRef<HTMLAudioElement>(null);\r\n        const [audioTrack, setAudioTrack] = useState<RemoteTrack | LocalAudioTrack | Track | null>(null);\r\n\r\n        useEffect(() => {\r\n            if (!participant) return;\r\n\r\n            const handleTrackSubscribed = (track: Track) => {\r\n                if (track.kind === Track.Kind.Audio) {\r\n                    setAudioTrack(track as RemoteTrack | LocalAudioTrack);\r\n                }\r\n            };\r\n\r\n            const handleTrackUnsubscribed = (track: Track) => {\r\n                if (track.kind === Track.Kind.Audio) {\r\n                    setAudioTrack(null);\r\n                }\r\n            };\r\n\r\n            // 查找现有的音频轨道\r\n            const audioPublication = Array.from(participant.trackPublications.values())\r\n                .find(pub => pub.kind === Track.Kind.Audio);\r\n\r\n            if (audioPublication && audioPublication.track) {\r\n                setAudioTrack(audioPublication.track);\r\n            }\r\n\r\n            participant.on(RoomEvent.TrackSubscribed, handleTrackSubscribed);\r\n            participant.on(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\r\n\r\n            return () => {\r\n                participant.off(RoomEvent.TrackSubscribed, handleTrackSubscribed);\r\n                participant.off(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\r\n            };\r\n        }, [participant]);\r\n\r\n        useEffect(() => {\r\n            const audioElement = audioRef.current;\r\n            if (audioElement && audioTrack) {\r\n                audioTrack.attach(audioElement);\r\n                // 远程音频默认静音，除非用户手动取消\r\n                audioElement.muted = isMuted;\r\n                return () => {\r\n                    audioTrack.detach(audioElement);\r\n                };\r\n            }\r\n        }, [audioTrack, isMuted]);\r\n\r\n        return <audio ref={audioRef} autoPlay playsInline />;\r\n    });\r\n\r\n    // 渲染参与者\r\n    const renderParticipant = useCallback((participant: Participant, isLocal: boolean) => {\r\n        const effectiveState = getEffectiveMediaState(participant.identity);\r\n\r\n        return (\r\n            <Box\r\n                key={participant.identity}\r\n                sx={{\r\n                    position: 'relative',\r\n                    borderRadius: 2,\r\n                    overflow: 'hidden',\r\n                    bgcolor: 'background.paper',\r\n                    boxShadow: 1,\r\n                }}\r\n            >\r\n                {/* 视频元素 */}\r\n                <ParticipantVideo\r\n                    participant={participant}\r\n                    isLocal={isLocal}\r\n                    isVideoEnabled={effectiveState.isVideoEnabled}\r\n                />\r\n\r\n                {/* 音频元素 */}\r\n                {!isLocal && (\r\n                    <ParticipantAudio\r\n                        participant={participant}\r\n                        isMuted={!effectiveState.isAudioEnabled}\r\n                    />\r\n                )}\r\n\r\n                {/* 控制栏 */}\r\n                <Grid container\r\n                    sx={{\r\n                        position: 'absolute',\r\n                        bottom: 0,\r\n                        left: 0,\r\n                        right: 0,\r\n                        p: 1,\r\n                        bgcolor: 'rgba(0, 0, 0, 0.6)',\r\n                        justifyContent: 'center',\r\n                        gap: 1,\r\n                    }}\r\n                >\r\n                    <Grid item>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            color={effectiveState.isAudioEnabled ? 'primary' : 'error'}\r\n                            onClick={() => handleToggleAudio(participant)}\r\n                        >\r\n                            {effectiveState.isAudioEnabled ? <VolumeUpIcon /> : <VolumeOffIcon />}\r\n                        </IconButton>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <IconButton\r\n                            size=\"small\"\r\n                            color={effectiveState.isVideoEnabled ? 'primary' : 'error'}\r\n                            onClick={() => handleToggleVideo(participant)}\r\n                        >\r\n                            {effectiveState.isVideoEnabled ? <VisibilityIcon /> : <VisibilityOffIcon />}\r\n                        </IconButton>\r\n                    </Grid>\r\n                    <Grid item>\r\n                        <Typography variant=\"caption\" color=\"white\">\r\n                            {participant.identity} {isLocal && '(你)'}\r\n                        </Typography>\r\n                    </Grid>\r\n\r\n                    {/* 本地麦克风控制 */}\r\n                    {isLocal && (\r\n                        <Grid item>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={handleLocalMuteToggle}\r\n                                color={isMuted ? 'error' : 'primary'}\r\n                                sx={{ color: 'white' }}\r\n                                title={isMuted ? '取消静音' : '静音'}\r\n                            >\r\n                                {isMuted ? <MicOffIcon /> : <MicIcon />}\r\n                            </IconButton>\r\n                        </Grid>\r\n                    )}\r\n\r\n                    {/* 本地视频控制 */}\r\n                    {isLocal && (\r\n                        <Grid item>\r\n                            <IconButton\r\n                                size=\"small\"\r\n                                onClick={handleLocalVideoToggle}\r\n                                color={isVideoEnabled ? 'primary' : 'error'}\r\n                                sx={{ color: 'white' }}\r\n                                title={isVideoEnabled ? '关闭摄像头' : '开启摄像头'}\r\n                            >\r\n                                {isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\r\n                            </IconButton>\r\n                        </Grid>\r\n                    )}\r\n                </Grid>\r\n            </Box>\r\n        );\r\n    }, [isMuted, isVideoEnabled, getEffectiveMediaState, handleToggleAudio, handleToggleVideo, handleLocalMuteToggle, handleLocalVideoToggle]);\r\n\r\n    // 渲染主界面\r\n    function renderMainContent() {\r\n        // 如果已经连接，显示会议界面\r\n        if (hasConnected && roomRef.current) {\r\n            return (\r\n                <Box className={className} sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\r\n                    <Box sx={{ flex: 1, overflow: 'auto', p: 2 }}>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} md={participants.length === 0 ? 12 : 6}>\r\n                                {renderParticipant(roomRef.current.localParticipant, true)}\r\n                            </Grid>\r\n                            {participants.map(function (participant) {\r\n                                return (\r\n                                    <Grid item xs={12} md={6} key={participant.identity}>\r\n                                        {renderParticipant(participant, false)}\r\n                                    </Grid>\r\n                                );\r\n                            })}\r\n                        </Grid>\r\n                    </Box>\r\n                    {/* 底部控制栏 */}\r\n                    <Box sx={{\r\n                        p: 2,\r\n                        borderTop: '1px solid',\r\n                        borderColor: 'divider',\r\n                        display: 'flex',\r\n                        justifyContent: 'center',\r\n                        gap: 2\r\n                    }}>\r\n                        {/* 根据事件类型和角色显示不同的控制按钮 */}\r\n                        {canControlMedia && (eventType === 'medical' || role === 'initiator') && (\r\n                            <>\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color={!globalMediaState.isAudioEnabled ? 'error' : 'primary'}\r\n                                    onClick={toggleMute}\r\n                                    startIcon={!globalMediaState.isAudioEnabled ? <MicOffIcon /> : <MicIcon />}\r\n                                >\r\n                                    {!globalMediaState.isAudioEnabled ? '取消静音' : '静音'}\r\n                                </Button>\r\n\r\n                                <Button\r\n                                    variant=\"contained\"\r\n                                    color={!globalMediaState.isVideoEnabled ? 'error' : 'primary'}\r\n                                    onClick={toggleVideo}\r\n                                    startIcon={globalMediaState.isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\r\n                                >\r\n                                    {globalMediaState.isVideoEnabled ? '关闭摄像头' : '开启摄像头'}\r\n                                </Button>\r\n                            </>\r\n                        )}\r\n                        \r\n                        {/* 安全呼救发起者显示特殊提示 */}\r\n                        {eventType === 'security' && role === 'initiator' && (\r\n                            <Typography variant=\"body2\" color=\"warning.main\" sx={{ alignSelf: 'center' }}>\r\n                                🔒 安全呼救模式：您的音视频正在发送，但无法接收对方音视频\r\n                            </Typography>\r\n                        )}\r\n                        \r\n                        {/* 医疗呼救接收者提示 */}\r\n                        {eventType === 'medical' && role === 'responder' && (\r\n                            <Typography variant=\"body2\" color=\"info.main\" sx={{ alignSelf: 'center' }}>\r\n                                🏥 医疗呼救：您可以选择是否发送自己的音视频\r\n                            </Typography>\r\n                        )}\r\n\r\n                        <Button\r\n                            variant=\"contained\"\r\n                            color=\"error\"\r\n                            onClick={leaveMeeting}\r\n                            startIcon={<CallEndIcon />}\r\n                        >\r\n                            离开会议\r\n                        </Button>\r\n                    </Box>\r\n                </Box>\r\n            );\r\n        }\r\n\r\n        // 未连接时显示连接界面\r\n        return (\r\n            <Box className={className} sx={{\r\n                height: '100%',\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                p: 3\r\n            }}>\r\n                <Typography variant=\"h6\" gutterBottom>\r\n                    准备加入会议\r\n                </Typography>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={connectToRoom}\r\n                    disabled={isConnecting}\r\n                    startIcon={<VideoIcon />}\r\n                    sx={{ mt: 2 }}\r\n                >\r\n                    加入会议\r\n                    {isConnecting && (\r\n                        <CircularProgress\r\n                            size={16}\r\n                            sx={{\r\n                                color: 'inherit',\r\n                                ml: 1\r\n                            }}\r\n                        />\r\n                    )}\r\n                </Button>\r\n            </Box>\r\n        );\r\n    }\r\n\r\n    // 统一渲染内容，避免提前 return 导致 hooks 数量不一致\r\n    let content: React.ReactNode;\r\n    if (isConnecting) {\r\n        content = (\r\n            <Box sx={{\r\n                display: 'flex',\r\n                flexDirection: 'column',\r\n                alignItems: 'center',\r\n                justifyContent: 'center',\r\n                height: '100%',\r\n                p: 3\r\n            }}>\r\n                <CircularProgress />\r\n                <Typography variant=\"body1\" sx={{ mt: 2 }}>正在连接会议...</Typography>\r\n            </Box>\r\n        );\r\n    } else if (error) {\r\n        content = (\r\n            <Alert severity=\"error\" sx={{ m: 2 }}>\r\n                <Typography variant=\"body1\">{error}</Typography>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={connectToRoom}\r\n                    startIcon={<RefreshIcon />}\r\n                    sx={{ mt: 1 }}\r\n                >\r\n                    重试连接\r\n                </Button>\r\n            </Alert>\r\n        );\r\n    } else {\r\n        content = renderMainContent();\r\n    }\r\n\r\n    useEffect(()=>{\r\n        if(directly){\r\n            connectToRoom();\r\n        }\r\n    }, [directly])\r\n    // 渲染组件\r\n    return (\r\n        <Box ref={ref} sx={sx} style={style}>\r\n            {content}\r\n        </Box>\r\n    );\r\n}\r\n\r\n// 使用 forwardRef 导出组件\r\nconst MeetingRoom = forwardRef(MeetingRoomComponent);\r\nMeetingRoom.displayName = 'MeetingRoom';\r\n\r\nexport { MeetingRoom };","import { MeetingRoom } from '@im/livekit';\nimport { Box } from '@mui/material';\nimport { mainModel } from '@src/libs/mc/main/MainModel';\n\nexport default function JoinCall() {\n    const urlParams = new URL(window.location.href).searchParams;\n    const name = urlParams.get(\"code\") || \"test\";\n    const role = (urlParams.get(\"role\") || \"initiator\") as 'initiator' | 'responder'; // Get role from URL\n    const eventType = (urlParams.get(\"eventType\") || \"security\") as 'medical' | 'security'; // Get event type from URL\n\n    // 根据事件类型和角色确定音视频初始状态\n    const getInitialMediaSettings = () => {\n        if (eventType === 'medical') {\n            // 医疗呼救：发送方发送音视频，接收方初始只接收，可手动控制\n            return {\n                audio: role === 'initiator', // 发起者开启音频\n                video: role === 'initiator', // 发起者开启视频\n                canControlMedia: true // 接收方可以手动控制\n            };\n        } else {\n            // 安全呼救：发送方发送音视频但不接收，接收方只接收\n            return {\n                audio: role === 'initiator', // 发起者开启音频\n                video: role === 'initiator', // 发起者开启视频\n                canControlMedia: role === 'responder' // 只有接收方可以控制\n            };\n        }\n    };\n\n    const mediaSettings = getInitialMediaSettings();\n\n  return (\n    <Box sx={{height: '100vh'}}>\n        <Box>\n            name:{name}, role:{role}, eventType:{eventType}\n        </Box>\n      <MeetingRoom\n        roomName={name}\n        directly={true}\n        userName={`user-${Math.random().toString(36).substring(2, 8)}`}\n        livekitConfig={mainModel.appConfig.livekit}\n        initialAudioEnabled={mediaSettings.audio}\n        initialVideoEnabled={mediaSettings.video}\n        role={role}\n        eventType={eventType}\n        canControlMedia={mediaSettings.canControlMedia}\n      />\n    </Box>\n  );\n}\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/join-call\",\n      function () {\n        return require(\"private-next-pages/join-call/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/join-call\"])\n      });\n    }\n  "],"names":["React","useCallback","useEffect","useRef","useState","forwardRef","Room","RoomEvent","RemoteParticipant","RemoteTrack","Track","createLocalAudioTrack","createLocalVideoTrack","Box","Button","Typography","Alert","IconButton","CircularProgress","Grid","Mic","MicIcon","MicOff","MicOffIcon","Videocam","VideoIcon","VideocamOff","VideoOffIcon","CallEnd","CallEndIcon","VolumeUp","VolumeUpIcon","VolumeOff","VolumeOffIcon","Refresh","RefreshIcon","Visibility","VisibilityIcon","VisibilityOff","VisibilityOffIcon","Log","logger","uiLogger","sub","VIDEO_PRESET","width","height","frameRate","maxBitrate","MeetingRoomComponent","ref","livekitConfig","roomName","userName","role","eventType","canControlMedia","onDisconnect","onError","className","style","sx","directly","initialVideoEnabled","initialAudioEnabled","globalMediaState","setGlobalMediaState","isAudioEnabled","isVideoEnabled","roomRef","localTracksRef","videoElements","audioElements","participantStates","setParticipantStates","isUnmountedRef","isConnecting","setIsConnecting","hasConnected","setHasConnected","error","setError","isMuted","setIsMuted","setIsVideoEnabled","participants","setParticipants","fetchToken","identity","response","fetch","jwt","method","headers","body","JSON","stringify","room_name","ok","Error","data","json","token","connectToRoom","log","audioTrack","videoTrack","createLocalTracks","current","room","adaptiveStream","dynacast","videoCaptureDefaults","resolution","publishDefaults","dtx","red","forceStereo","simulcast","setupRoomListeners","connect","wsUrl","autoSubscribe","localParticipant","remoteParticipants","size","Array","from","values","forEach","participant","index","shouldPublishTracks","Promise","all","publishTrack","mute","publishError","shouldPublishTracksForState","updateParticipantState","initParticipantState","getTrackPublications","publication","track","handleTrackSubscribed","cleanupTracks","disconnect","e","echoCancellation","noiseSuppression","autoGainControl","tracks","stop","detach","trackElementsRef","videoElementsRef","audioElementsRef","state","prev","isAudioEnabledGlobal","isVideoEnabledGlobal","isVideoTrack","kind","Kind","Video","updateTrackState","stateUpdate","Audio","on","participantExists","some","p","off","eventHandlers","participantConnected","handleTrackPublished","once","trackPublications","participantDisconnected","newParticipants","filter","map","trackSubscribed","disconnected","reason","reasonStr","toString","reconnecting","reconnected","Disconnected","Reconnecting","Reconnected","ParticipantConnected","ParticipantDisconnected","TrackSubscribed","undefined","leaveMeeting","Object","el","remove","cleanup","isUnmounting","find","t","updateGlobalMediaState","audioEnabled","videoEnabled","toggleMute","newGlobalAudioState","isTrackPublished","has","sid","unmute","toggleVideo","newGlobalVideoState","handleLocalMuteToggle","newMutedState","handleLocalVideoToggle","newVideoState","getParticipantState","pub","handleToggleAudio","currentState","handleToggleVideo","getEffectiveMediaState","participantId","ParticipantVideo","memo","isLocal","videoRef","setVideoTrack","videoPublication","handleTrackUnsubscribed","TrackUnsubscribed","videoElement","firstChild","removeChild","attach","aspectRatio","bgcolor","display","alignItems","justifyContent","position","video","autoPlay","playsInline","muted","objectFit","top","left","right","bottom","borderRadius","color","fontSize","fontWeight","charAt","toUpperCase","ParticipantAudio","audioRef","setAudioTrack","audioPublication","audioElement","audio","renderParticipant","effectiveState","overflow","boxShadow","container","gap","item","onClick","variant","title","renderMainContent","flexDirection","flex","spacing","xs","md","length","borderTop","borderColor","startIcon","alignSelf","gutterBottom","disabled","mt","ml","content","severity","m","MeetingRoom","displayName","mainModel","JoinCall","urlParams","URL","window","location","href","searchParams","name","get","getInitialMediaSettings","mediaSettings","Math","random","substring","appConfig","livekit"],"sourceRoot":"","ignoreList":[]}