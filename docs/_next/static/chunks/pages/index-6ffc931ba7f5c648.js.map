{"version":3,"file":"static/chunks/pages/index-6ffc931ba7f5c648.js","mappings":"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","sources":["webpack://_N_E/../../../src/livekit-meeting/MeetingRoom.tsx","webpack://_N_E/./src/pages/index.tsx","webpack://_N_E/"],"sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useRef,\n    useState,\n    forwardRef,\n    ForwardedRef\n} from 'react';\nimport {\n    Room,\n    RoomEvent,\n    Participant,\n    RemoteParticipant,\n    RemoteTrack,\n    Track,\n    LocalTrack,\n    LocalVideoTrack,\n    LocalAudioTrack,\n    createLocalAudioTrack,\n    createLocalVideoTrack,\n    VideoPreset,\n    VideoPresets,\n    TrackPublication,\n    LocalParticipant\n} from 'livekit-client';\nimport {\n    Box,\n    Button,\n    Typography,\n    Alert,\n    IconButton,\n    CircularProgress,\n    Stack,\n    SxProps,\n    Theme\n} from '@mui/material';\nimport Grid from '@mui/material/Grid';\nimport {\n    Mic as MicIcon,\n    MicOff as MicOffIcon,\n    ScreenShare as ScreenShareIcon,\n    StopScreenShare as StopScreenShareIcon,\n    Videocam as VideoIcon,\n    VideocamOff as VideoOffIcon,\n    CallEnd as CallEndIcon,\n    Settings as SettingsIcon,\n    VolumeUp as VolumeUpIcon,\n    VolumeOff as VolumeOffIcon,\n    Fullscreen as FullscreenIcon,\n    FullscreenExit as FullscreenExitIcon,\n    Refresh as RefreshIcon,\n    Visibility as VisibilityIcon,\n    VisibilityOff as VisibilityOffIcon\n} from '@mui/icons-material';\nimport { Log } from '@fanfanlo';\n// import { mainModel } from '@src/libs/mc/main/MainModel';\nimport { MeetingRoomProps, VideoPresetConfig, ExtendedParticipantState, ParticipantState } from './meeting-room.intf';\n\n// 日志记录器\nconst logger = new Log(false, 'livekit-meeting.MeetingRoom');\nconst uiLogger = logger.sub(false, 'MeetingRoom_ui');\n\n// 视频预设\nconst VIDEO_PRESET: VideoPresetConfig = {\n    width: 1280,\n    height: 720,\n    // @ts-ignore - frameRate is used by LiveKit internally\n    frameRate: 24,\n    maxBitrate: 3000 * 1000, // 3Mbps\n};\n\n// 类型定义已移至 meetint-room.intf.ts\n\n\n// function getTokenEndpoint(): string {\n//     if (!mainModel.appConfig?.livekit?.jwt) {\n//         throw new Error('LiveKit JWT endpoint is not configured');\n//     }\n//     return `${mainModel.appConfig.livekit.jwt}/token`;\n// }\n// 主组件实现\nfunction MeetingRoomComponent(\n    {\n        livekitConfig,\n        roomName,\n        userName,\n        onDisconnect,\n        onError,\n        className = '',\n        style,\n        sx\n    }: MeetingRoomProps,\n    ref: ForwardedRef<HTMLDivElement>\n) {\n    // 全局音视频控制状态\n    const [globalMediaState, setGlobalMediaState] = useState<{\n        isAudioEnabled: boolean;\n        isVideoEnabled: boolean;\n    }>({\n        isAudioEnabled: true,\n        isVideoEnabled: true,\n    });\n\n    // Refs\n    const roomRef = useRef<Room | null>(null);\n    const localTracksRef = useRef<LocalTrack[]>([]);\n    const videoElements = useRef<Record<string, HTMLVideoElement>>({});\n    const audioElements = useRef<Record<string, HTMLAudioElement>>({});\n    const [participantStates, setParticipantStates] = useState<Record<string, ExtendedParticipantState>>({});\n    const isUnmountedRef = useRef(false);\n\n    // State\n    const [isConnecting, setIsConnecting] = useState(false);\n    const [hasConnected, setHasConnected] = useState(false);\n    const [error, setError] = useState<string | null>(null);\n    const [isMuted, setIsMuted] = useState(false);\n    const [isVideoEnabled, setIsVideoEnabled] = useState(true);\n    const [participants, setParticipants] = useState<RemoteParticipant[]>([]);\n\n    console.log('fffffffffffffffffff')\n    // 获取 token\n    const fetchToken = useCallback(async (roomName: string, identity: string) => {\n        try {\n            const response = await fetch(`${livekitConfig.jwt}/token`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({\n                    room_name: roomName,\n                    identity,\n                }),\n            });\n\n            if (!response.ok) {\n                throw new Error('获取 token 失败');\n            }\n\n            const data = await response.json();\n            return data.token;\n        } catch (error) {\n            uiLogger.error('获取 token 失败:', error);\n            throw error;\n        }\n    }, []);\n\n    // 连接到房间\n    const connectToRoom = useCallback(async () => {\n        if (isConnecting || hasConnected) return;\n\n        setIsConnecting(true);\n        setError(null);\n\n        try {\n            // 1. 获取 token\n            const token = await fetchToken(roomName, userName);\n            uiLogger.log('token:', token);\n\n            // 2. 创建本地轨道\n            const { audioTrack, videoTrack } = await createLocalTracks();\n            localTracksRef.current = [audioTrack, videoTrack];\n            uiLogger.log('audioTrack:', audioTrack);\n            uiLogger.log('videoTrack:', videoTrack);\n            // 3. 创建房间连接\n            const room = new Room({\n                adaptiveStream: true,\n                dynacast: true,\n                videoCaptureDefaults: {\n                    resolution: VIDEO_PRESET,\n                },\n                // @ts-ignore - publishDefaults is a valid option\n                publishDefaults: {\n                    dtx: true,\n                    red: true,\n                    forceStereo: false,\n                    simulcast: true,\n                } as any, // Type assertion to bypass type checking for now\n            });\n            uiLogger.log('room:', room);\n            // 4. 设置事件监听\n            setupRoomListeners(room);\n\n            // 5. 连接到房间\n            await room.connect(\n                livekitConfig.wsUrl,\n                token,\n                {\n                    autoSubscribe: true,\n                }\n            );\n            uiLogger.log('room connected');\n            // 6. 发布本地轨道\n            try {\n                await Promise.all([\n                    room.localParticipant.publishTrack(audioTrack),\n                    room.localParticipant.publishTrack(videoTrack)\n                ]);\n            } catch (publishError) {\n                uiLogger.error('发布轨道失败:', publishError);\n                // 即使发布失败也继续，因为可能已经有其他参与者发布了相同的轨道\n            }\n\n            // 7. 更新引用和状态\n            roomRef.current = room;\n            setHasConnected(true);\n\n            // 8. 添加现有远程参与者到状态\n            const remoteParticipants = Array.from(room.remoteParticipants.values());\n            setParticipants(remoteParticipants);\n\n            // 9. 更新本地参与者状态\n            updateParticipantState(room.localParticipant.identity, {\n                isAudioEnabled: true,\n                isVideoEnabled: true,\n                audioTrack,\n                videoTrack,\n            });\n\n            // 10. 为现有远程参与者设置轨道\n            remoteParticipants.forEach(participant => {\n                // 初始化远程参与者状态\n                initParticipantState(participant);\n                uiLogger.log('已初始化远程参与者状态:', participant.identity);\n                \n                // 使用 getTrackPublications 获取所有轨道发布\n                participant.getTrackPublications().forEach(publication => {\n                    if (publication.track && publication.track instanceof RemoteTrack) {\n                        handleTrackSubscribed(publication.track, publication, participant);\n                    }\n                });\n            });\n            \n            // 初始化本地参与者状态\n            if (room.localParticipant) {\n                initParticipantState(room.localParticipant);\n                uiLogger.log('已初始化本地参与者状态:', room.localParticipant.identity);\n            }\n\n            uiLogger.log('成功加入会议');\n\n        } catch (error) {\n            uiLogger.error('连接房间失败啦:', error);\n            setError('加入会议失败，请检查网络和权限设置');\n            // 发生错误时清理资源\n            cleanupTracks(localTracksRef.current);\n            localTracksRef.current = [];\n\n            if (roomRef.current) {\n                try {\n                    await roomRef.current.disconnect();\n                } catch (e) {\n                    uiLogger.error('断开连接时出错:', e);\n                }\n                roomRef.current = null;\n            }\n        } finally {\n            setIsConnecting(false);\n        }\n    }, [roomName, userName, isConnecting, hasConnected, fetchToken]);\n\n    // 创建本地音视频轨道\n    const createLocalTracks = useCallback(async () => {\n        try {\n            const [audioTrack, videoTrack] = await Promise.all([\n                createLocalAudioTrack({\n                    echoCancellation: true,\n                    noiseSuppression: true,\n                    autoGainControl: true,\n                }),\n                createLocalVideoTrack({\n                    resolution: {\n                        width: 1280,\n                        height: 720,\n                        frameRate: 24,\n                    },\n                }),\n            ]);\n            return { audioTrack, videoTrack };\n        } catch (error) {\n            uiLogger.error('创建本地轨道失败:', error);\n            throw error;\n        }\n    }, []);\n\n    // 清理轨道\n    const cleanupTracks = useCallback((tracks: LocalTrack[]) => {\n        tracks.forEach(track => {\n            track.stop();\n            track.detach();\n        });\n    }, []);\n\n    // 跟踪已处理的轨道元素\n    const trackElementsRef = useRef<Record<string, boolean>>({});\n    const videoElementsRef = useRef<Record<string, HTMLVideoElement>>({});\n    const audioElementsRef = useRef<Record<string, HTMLAudioElement>>({});\n\n    // 更新参与者状态\n    const updateParticipantState = useCallback((identity: string, state: Partial<ParticipantState>) => {\n        setParticipantStates(prev => ({\n            ...prev,\n            [identity]: {\n                ...(prev[identity] || {\n                    isAudioEnabled: true,\n                    isVideoEnabled: true,\n                    isAudioEnabledGlobal: true,\n                    isVideoEnabledGlobal: true,\n                }),\n                ...state,\n            },\n        }));\n    }, []);\n    // 处理轨道订阅\n    const handleTrackSubscribed = useCallback((\n        track: RemoteTrack,\n        publication: TrackPublication,\n        participant: Participant\n    ) => {\n        if (!track) return () => { };\n\n        const { identity } = participant;\n        const isVideoTrack = track.kind === Track.Kind.Video;\n\n        uiLogger.log(`处理 ${track.kind} 轨道订阅:`, identity, track);\n\n        // 更新轨道状态的函数\n        const updateTrackState = () => {\n            const isMuted = track.isMuted;\n            const stateUpdate: Partial<ParticipantState> = {};\n\n            if (track.kind === Track.Kind.Audio) {\n                stateUpdate.isAudioEnabled = !isMuted;\n            } else if (track.kind === Track.Kind.Video) {\n                stateUpdate.isVideoEnabled = !isMuted;\n            }\n\n            updateParticipantState(identity, stateUpdate);\n\n            // 强制触发重新渲染以确保 ParticipantVideo 组件更新\n            if (isVideoTrack) {\n                setParticipants(prev => [...prev]);\n            }\n        };\n\n        // 监听轨道静音/取消静音事件\n        track.on('muted', updateTrackState);\n        track.on('unmuted', updateTrackState);\n\n        // 初始状态更新\n        updateTrackState();\n\n        // 强制更新参与者列表以触发重新渲染\n        // 这确保了即使没有状态变化，组件也会检查新的轨道\n        setParticipants(prev => {\n            const participantExists = prev.some(p => p.identity === identity);\n            if (!participantExists) {\n                return [...prev, participant as RemoteParticipant];\n            }\n            return [...prev];\n        });\n\n\n        // 清理函数\n        return () => {\n            track.off('muted', updateTrackState);\n            track.off('unmuted', updateTrackState);\n        };\n    }, [updateParticipantState]);\n\n    // 设置房间事件监听\n    const setupRoomListeners = useCallback((room: Room) => {\n        // 保存所有事件处理函数引用，以便后续清理\n        type EventHandler = (...args: any[]) => void;\n        const eventHandlers: Record<string, EventHandler> = {\n            // 处理远程参与者连接\n            participantConnected: (participant: RemoteParticipant) => {\n                if (!(participant instanceof RemoteParticipant)) return;\n\n                uiLogger.log('远程参与者已连接:', participant.identity);\n\n                // 添加新参与者到状态（使用函数式更新确保不重复添加）\n                setParticipants(prev => {\n                    // 如果已经存在该参与者，则返回原数组\n                    if (prev.some(p => p.identity === participant.identity)) {\n                        return prev;\n                    }\n                    return [...prev, participant];\n                });\n\n                // 监听参与者的轨道发布\n                const handleTrackPublished = (publication: TrackPublication) => {\n                    uiLogger.log('远程参与者发布轨道:', publication.kind, participant.identity);\n                    if (publication.track) {\n                        handleTrackSubscribed(publication.track as RemoteTrack, publication, participant);\n                    } else {\n                        publication.once('subscribed', (track: RemoteTrack) => {\n                            handleTrackSubscribed(track, publication, participant);\n                        });\n                    }\n                };\n\n                // 添加轨道发布监听\n                participant.on('trackPublished', handleTrackPublished);\n\n                // 处理已经发布的轨道\n                participant.trackPublications.forEach(publication => {\n                    if (publication.track) {\n                        handleTrackSubscribed(publication.track as RemoteTrack, publication, participant);\n                    }\n                });\n\n                // 返回清理函数\n                return () => {\n                    participant.off('trackPublished', handleTrackPublished);\n                };\n            },\n\n            // 处理参与者断开连接\n            participantDisconnected: (participant: RemoteParticipant) => {\n                uiLogger.log('远程参与者已断开连接:', participant.identity);\n                setParticipants(prev => {\n                    const newParticipants = prev.filter(p => p.identity !== participant.identity);\n                    uiLogger.log('更新后的参与者列表:', newParticipants.map(p => p.identity));\n                    return newParticipants;\n                });\n            },\n\n            // 处理轨道订阅\n            trackSubscribed: (track: RemoteTrack, publication: TrackPublication, participant: Participant) => {\n                if (!track) return;\n                uiLogger.log('轨道订阅成功:', track.kind, participant.identity);\n                // 处理远程轨道订阅\n                handleTrackSubscribed(track, publication, participant as RemoteParticipant);\n            },\n\n            disconnected: (reason?: any) => {\n                const reasonStr = reason?.toString?.() || '未知原因';\n                uiLogger.log('已从房间断开连接，原因:', reasonStr);\n                // 更新状态但不调用 handleDisconnect，因为可能是我们主动断开的\n                setHasConnected(false);\n                setParticipants([]);\n                setError(null);\n            },\n\n            reconnecting: () => {\n                uiLogger.log('正在重新连接到房间...');\n                setError('正在重新连接...');\n            },\n\n            reconnected: () => {\n                uiLogger.log('已重新连接到房间');\n                setError(null);\n            }\n        };\n\n        // 添加事件监听\n        room\n            .on(RoomEvent.Disconnected, eventHandlers.disconnected)\n            .on(RoomEvent.Reconnecting, eventHandlers.reconnecting)\n            .on(RoomEvent.Reconnected, eventHandlers.reconnected)\n            .on(RoomEvent.ParticipantConnected, eventHandlers.participantConnected)\n            .on(RoomEvent.ParticipantDisconnected, eventHandlers.participantDisconnected)\n            .on(RoomEvent.TrackSubscribed, eventHandlers.trackSubscribed);\n\n        // 返回清理函数\n        return () => {\n            if (!room) return;\n            room\n                .off(RoomEvent.Disconnected, eventHandlers.disconnected)\n                .off(RoomEvent.Reconnecting, eventHandlers.reconnecting)\n                .off(RoomEvent.Reconnected, eventHandlers.reconnected)\n                .off(RoomEvent.ParticipantConnected, eventHandlers.participantConnected)\n                .off(RoomEvent.ParticipantDisconnected, eventHandlers.participantDisconnected)\n                .off(RoomEvent.TrackSubscribed, eventHandlers.trackSubscribed);\n\n            // 确保返回 void\n            return undefined;\n        };\n    }, [handleTrackSubscribed]);\n\n    // 离开会议\n    const leaveMeeting = useCallback(async () => {\n        uiLogger.log('正在离开会议...');\n        try {\n            // 停止所有本地轨道\n            cleanupTracks(localTracksRef.current);\n\n            // 断开房间连接\n            if (roomRef.current) {\n                await roomRef.current.disconnect();\n                roomRef.current = null;\n            }\n\n            // 更新状态\n            setHasConnected(false);\n            setParticipants([]);\n            setError(null);\n\n            // 清除所有媒体元素\n            Object.values(videoElements.current).forEach(el => el && el.remove());\n            Object.values(audioElements.current).forEach(el => el && el.remove());\n            videoElements.current = {};\n            audioElements.current = {};\n\n            // 调用断开连接回调\n            if (onDisconnect) {\n                onDisconnect();\n            }\n\n            uiLogger.log('已成功离开会议');\n        } catch (error) {\n            uiLogger.error('离开会议时出错:', error);\n            setError('离开会议时出错，请重试');\n        }\n    }, [onDisconnect]);\n\n    // 清理函数\n    const cleanup = useCallback(async (isUnmounting = false) => {\n        // 如果是组件卸载，设置卸载标志\n        if (isUnmounting) {\n            isUnmountedRef.current = true;\n        }\n\n        uiLogger.log('执行清理...');\n        if (!roomRef.current) return;\n\n        const localParticipant = roomRef.current.localParticipant;\n        const audioTrack = localTracksRef.current.find(\n            t => t.kind === Track.Kind.Audio\n        ) as LocalAudioTrack | undefined;\n        const videoTrack = localTracksRef.current.find(\n            t => t.kind === Track.Kind.Video\n        ) as LocalVideoTrack | undefined;\n\n        try {\n            if (audioTrack) {\n                await audioTrack.stop();\n            }\n            if (videoTrack) {\n                await videoTrack.stop();\n            }\n        } catch (error) {\n            uiLogger.error('停止轨道失败:', error);\n        }\n\n        // 清理轨道\n        cleanupTracks(localTracksRef.current);\n        localTracksRef.current = [];\n\n        // 清理房间\n        if (roomRef.current) {\n            roomRef.current.disconnect();\n            roomRef.current = null;\n        }\n\n        // 清理状态\n        setHasConnected(false);\n        setParticipants([]);\n        setParticipantStates({});\n    }, []);\n\n    // 更新全局媒体状态\n    const updateGlobalMediaState = useCallback((audioEnabled: boolean, videoEnabled: boolean) => {\n        setGlobalMediaState(prev => ({\n            ...prev,\n            isAudioEnabled: audioEnabled,\n            isVideoEnabled: videoEnabled,\n        }));\n    }, []);\n\n    // 切换静音状态（全局控制）\n    const toggleMute = useCallback(async () => {\n        if (!roomRef.current) return;\n\n        const localParticipant = roomRef.current.localParticipant;\n        const audioTrack = localTracksRef.current.find(\n            t => t.kind === Track.Kind.Audio\n        ) as LocalAudioTrack | undefined;\n\n        if (!audioTrack) return;\n\n        try {\n            // 全局按钮基于全局状态进行切换\n            const newGlobalAudioState = !globalMediaState.isAudioEnabled;\n\n            // 同步更新本地麦克风的物理状态\n            if (newGlobalAudioState) {\n                await audioTrack.unmute();\n            } else {\n                await audioTrack.mute();\n            }\n\n            // 更新本地UI状态\n            setIsMuted(!newGlobalAudioState);\n            updateParticipantState(localParticipant.identity, { isAudioEnabled: newGlobalAudioState });\n\n            // 更新全局音频状态，这将影响所有参与者的有效状态\n            updateGlobalMediaState(newGlobalAudioState, globalMediaState.isVideoEnabled);\n        } catch (error) {\n            uiLogger.error('切换静音状态失败:', error);\n            setError('切换麦克风状态失败');\n        }\n    }, [globalMediaState, updateParticipantState, updateGlobalMediaState]);\n\n    // 切换视频状态（全局控制）\n    const toggleVideo = useCallback(async () => {\n        if (!roomRef.current) return;\n\n        const localParticipant = roomRef.current.localParticipant;\n        const videoTrack = localTracksRef.current.find(\n            t => t.kind === Track.Kind.Video\n        ) as LocalVideoTrack | undefined;\n\n        if (!videoTrack) return;\n\n        try {\n            // 全局按钮基于全局状态进行切换\n            const newGlobalVideoState = !globalMediaState.isVideoEnabled;\n\n            // 同步更新本地摄像头的物理状态\n            if (newGlobalVideoState) {\n                await videoTrack.unmute();\n            } else {\n                await videoTrack.mute();\n            }\n\n            // 更新本地UI状态\n            setIsVideoEnabled(newGlobalVideoState);\n            updateParticipantState(localParticipant.identity, { isVideoEnabled: newGlobalVideoState });\n\n            // 更新全局视频状态，这将影响所有参与者的有效状态\n            updateGlobalMediaState(globalMediaState.isAudioEnabled, newGlobalVideoState);\n        } catch (error) {\n            uiLogger.error('切换视频状态失败:', error);\n            setError('切换摄像头状态失败');\n        }\n    }, [globalMediaState, updateParticipantState, updateGlobalMediaState]);\n\n    // 切换本地静音状态（仅本地tile）\n    const handleLocalMuteToggle = useCallback(async () => {\n        if (!roomRef.current) return;\n\n        const localParticipant = roomRef.current.localParticipant;\n        const audioTrack = localTracksRef.current.find(\n            t => t.kind === Track.Kind.Audio\n        ) as LocalAudioTrack | undefined;\n\n        if (!audioTrack) return;\n\n        try {\n            const newMutedState = !isMuted;\n            if (newMutedState) {\n                await audioTrack.mute();\n            } else {\n                await audioTrack.unmute();\n            }\n\n            setIsMuted(newMutedState);\n            updateParticipantState(localParticipant.identity, { isAudioEnabled: !newMutedState });\n        } catch (error) {\n            uiLogger.error('切换本地静音状态失败:', error);\n            setError('切换麦克风状态失败');\n        }\n    }, [isMuted, updateParticipantState]);\n\n    // 切换本地视频状态（仅本地tile）\n    const handleLocalVideoToggle = useCallback(async () => {\n        if (!roomRef.current) return;\n\n        const localParticipant = roomRef.current.localParticipant;\n        const videoTrack = localTracksRef.current.find(\n            t => t.kind === Track.Kind.Video\n        ) as LocalVideoTrack | undefined;\n\n        if (!videoTrack) return;\n\n        try {\n            const newVideoState = !isVideoEnabled;\n            if (newVideoState) {\n                await videoTrack.unmute();\n            } else {\n                await videoTrack.mute();\n            }\n\n            setIsVideoEnabled(newVideoState);\n            updateParticipantState(localParticipant.identity, { isVideoEnabled: newVideoState });\n        } catch (error) {\n            uiLogger.error('切换本地视频状态失败:', error);\n            setError('切换摄像头状态失败');\n        }\n    }, [isVideoEnabled, updateParticipantState]);\n\n    // 组件卸载时清理资源\n    useEffect(() => {\n        return () => {\n            // 清理资源\n            cleanup(true);\n        };\n    }, []);\n\n    // 获取参与者状态\n    const getParticipantState = useCallback((identity: string): ParticipantState => {\n        return participantStates[identity] || {\n            isAudioEnabled: true,\n            isVideoEnabled: true,\n            isAudioEnabledGlobal: true,\n            isVideoEnabledGlobal: true,\n        };\n    }, [participantStates]);\n\n    // 初始化参与者状态\n    const initParticipantState = useCallback((participant: Participant) => {\n        const state = getParticipantState(participant.identity);\n\n        // 更新音频状态\n        const audioTrack = participant.getTrackPublications().find(\n            pub => pub.kind === Track.Kind.Audio\n        )?.track as LocalAudioTrack | undefined;\n\n        // 更新视频状态\n        const videoTrack = participant.getTrackPublications().find(\n            pub => pub.kind === Track.Kind.Video\n        )?.track as LocalVideoTrack | undefined;\n\n        updateParticipantState(participant.identity, {\n            ...state,\n            isAudioEnabled: audioTrack ? !audioTrack.isMuted : false,\n            isVideoEnabled: videoTrack ? !videoTrack.isMuted : false\n        });\n    }, [getParticipantState, updateParticipantState]);\n\n    // 切换参与者的音频状态\n    const handleToggleAudio = useCallback((participant: Participant) => {\n        const currentState = participantStates[participant.identity] || {\n            isAudioEnabled: true,\n            isVideoEnabled: true,\n            isAudioEnabledGlobal: true,\n            isVideoEnabledGlobal: true,\n        };\n\n        updateParticipantState(participant.identity, {\n            ...currentState,\n            isAudioEnabled: !currentState.isAudioEnabled\n        });\n    }, [participantStates, updateParticipantState]);\n\n    // 切换参与者的视频状态\n    const handleToggleVideo = useCallback((participant: Participant) => {\n        const currentState = participantStates[participant.identity] || {\n            isAudioEnabled: true,\n            isVideoEnabled: true,\n            isAudioEnabledGlobal: true,\n            isVideoEnabledGlobal: true,\n        };\n\n        updateParticipantState(participant.identity, {\n            ...currentState,\n            isVideoEnabled: !currentState.isVideoEnabled\n        });\n    }, [participantStates, updateParticipantState]);\n\n    // 获取参与者的实际媒体状态（考虑全局覆盖）\n    const getEffectiveMediaState = useCallback((participantId: string) => {\n        const state = participantStates[participantId];\n        if (!state) return { isAudioEnabled: true, isVideoEnabled: true };\n\n        return {\n            isAudioEnabled: globalMediaState.isAudioEnabled ? state.isAudioEnabled : false,\n            isVideoEnabled: globalMediaState.isVideoEnabled ? state.isVideoEnabled : false,\n        };\n    }, [globalMediaState, participantStates]);\n\n    // 参与者视频组件\n    const ParticipantVideo = React.memo(({\n        participant,\n        isLocal,\n        isVideoEnabled\n    }: {\n        participant: Participant;\n        isLocal: boolean;\n        isVideoEnabled: boolean;\n    }) => {\n        const videoRef = useRef<HTMLVideoElement>(null);\n        const [videoTrack, setVideoTrack] = useState<RemoteTrack | LocalVideoTrack | Track | null>(null);\n\n        // 处理视频轨道变化\n        useEffect(() => {\n            if (!participant) return;\n\n            // 查找现有的视频轨道发布\n            const videoPublication = Array.from(participant.trackPublications.values())\n                .find(pub => pub.kind === Track.Kind.Video);\n\n            // 如果轨道已存在，则直接设置\n            if (videoPublication && videoPublication.track) {\n                setVideoTrack(videoPublication.track);\n            }\n\n            // 当订阅轨道时处理\n            const handleTrackSubscribed = (track: Track) => {\n                if (track.kind === Track.Kind.Video) {\n                    setVideoTrack(track as RemoteTrack | LocalVideoTrack);\n                }\n            };\n\n            // 当取消订阅轨道时处理\n            const handleTrackUnsubscribed = (track: Track) => {\n                if (track.kind === Track.Kind.Video) {\n                    setVideoTrack(null);\n                }\n            };\n\n            // 添加事件监听\n            participant.on(RoomEvent.TrackSubscribed, handleTrackSubscribed);\n            participant.on(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\n\n            // 清理函数\n            return () => {\n                participant.off(RoomEvent.TrackSubscribed, handleTrackSubscribed);\n                participant.off(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\n            };\n        }, [participant]);\n\n        // 处理视频元素附加/分离\n        useEffect(() => {\n            const videoElement = videoRef.current;\n            if (!videoElement || !videoTrack) return;\n\n            // 清理现有视频源\n            while (videoElement.firstChild) {\n                videoElement.removeChild(videoElement.firstChild);\n            }\n\n            // 附加视频轨道\n            if (isVideoEnabled) {\n                videoTrack.attach(videoElement);\n            }\n\n            return () => {\n                if (videoTrack) {\n                    videoTrack.detach(videoElement);\n                }\n            };\n        }, [videoTrack, isVideoEnabled]);\n\n        return (\n            <Box\n                sx={{\n                    width: '100%',\n                    aspectRatio: '16/9',\n                    bgcolor: 'grey.800',\n                    display: 'flex',\n                    alignItems: 'center',\n                    justifyContent: 'center',\n                    position: 'relative',\n                }}\n            >\n                <video\n                    ref={videoRef}\n                    autoPlay\n                    playsInline\n                    muted={isLocal}\n                    style={{\n                        width: '100%',\n                        height: '100%',\n                        objectFit: 'cover',\n                        display: isVideoEnabled ? 'block' : 'none'\n                    }}\n                />\n                {!isVideoEnabled && (\n                    <Box\n                        sx={{\n                            position: 'absolute',\n                            top: 0,\n                            left: 0,\n                            right: 0,\n                            bottom: 0,\n                            display: 'flex',\n                            alignItems: 'center',\n                            justifyContent: 'center',\n                            bgcolor: 'grey.900',\n                        }}\n                    >\n                        <Box\n                            sx={{\n                                width: 80,\n                                height: 80,\n                                borderRadius: '50%',\n                                display: 'flex',\n                                alignItems: 'center',\n                                justifyContent: 'center',\n                                bgcolor: 'primary.main',\n                                color: 'white',\n                                fontSize: 32,\n                                fontWeight: 'bold',\n                            }}\n                        >\n                            {participant.identity.charAt(0).toUpperCase()}\n                        </Box>\n                    </Box>\n                )}\n            </Box>\n        );\n    });\n\n    // 参与者音频组件\n    const ParticipantAudio = React.memo(({\n        participant,\n        isMuted,\n    }: {\n        participant: Participant;\n        isMuted: boolean;\n    }) => {\n        const audioRef = useRef<HTMLAudioElement>(null);\n        const [audioTrack, setAudioTrack] = useState<RemoteTrack | LocalAudioTrack | Track | null>(null);\n\n        useEffect(() => {\n            if (!participant) return;\n\n            const handleTrackSubscribed = (track: Track) => {\n                if (track.kind === Track.Kind.Audio) {\n                    setAudioTrack(track as RemoteTrack | LocalAudioTrack);\n                }\n            };\n\n            const handleTrackUnsubscribed = (track: Track) => {\n                if (track.kind === Track.Kind.Audio) {\n                    setAudioTrack(null);\n                }\n            };\n\n            // 查找现有的音频轨道\n            const audioPublication = Array.from(participant.trackPublications.values())\n                .find(pub => pub.kind === Track.Kind.Audio);\n\n            if (audioPublication && audioPublication.track) {\n                setAudioTrack(audioPublication.track);\n            }\n\n            participant.on(RoomEvent.TrackSubscribed, handleTrackSubscribed);\n            participant.on(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\n\n            return () => {\n                participant.off(RoomEvent.TrackSubscribed, handleTrackSubscribed);\n                participant.off(RoomEvent.TrackUnsubscribed, handleTrackUnsubscribed);\n            };\n        }, [participant]);\n\n        useEffect(() => {\n            const audioElement = audioRef.current;\n            if (audioElement && audioTrack) {\n                audioTrack.attach(audioElement);\n                // 远程音频默认静音，除非用户手动取消\n                audioElement.muted = isMuted;\n                return () => {\n                    audioTrack.detach(audioElement);\n                };\n            }\n        }, [audioTrack, isMuted]);\n\n        return <audio ref={audioRef} autoPlay playsInline />;\n    });\n\n    // 渲染参与者\n    const renderParticipant = useCallback((participant: Participant, isLocal: boolean) => {\n        const effectiveState = getEffectiveMediaState(participant.identity);\n\n        return (\n            <Box\n                key={participant.identity}\n                sx={{\n                    position: 'relative',\n                    borderRadius: 2,\n                    overflow: 'hidden',\n                    bgcolor: 'background.paper',\n                    boxShadow: 1,\n                }}\n            >\n                {/* 视频元素 */}\n                <ParticipantVideo\n                    participant={participant}\n                    isLocal={isLocal}\n                    isVideoEnabled={effectiveState.isVideoEnabled}\n                />\n\n                {/* 音频元素 */}\n                {!isLocal && (\n                    <ParticipantAudio\n                        participant={participant}\n                        isMuted={!effectiveState.isAudioEnabled}\n                    />\n                )}\n\n                {/* 控制栏 */}\n                <Grid container\n                    sx={{\n                        position: 'absolute',\n                        bottom: 0,\n                        left: 0,\n                        right: 0,\n                        p: 1,\n                        bgcolor: 'rgba(0, 0, 0, 0.6)',\n                        justifyContent: 'center',\n                        gap: 1,\n                    }}\n                >\n                    <Grid item>\n                        <IconButton\n                            size=\"small\"\n                            color={effectiveState.isAudioEnabled ? 'primary' : 'error'}\n                            onClick={() => handleToggleAudio(participant)}\n                        >\n                            {effectiveState.isAudioEnabled ? <VolumeUpIcon /> : <VolumeOffIcon />}\n                        </IconButton>\n                    </Grid>\n                    <Grid item>\n                        <IconButton\n                            size=\"small\"\n                            color={effectiveState.isVideoEnabled ? 'primary' : 'error'}\n                            onClick={() => handleToggleVideo(participant)}\n                        >\n                            {effectiveState.isVideoEnabled ? <VisibilityIcon /> : <VisibilityOffIcon />}\n                        </IconButton>\n                    </Grid>\n                    <Grid item>\n                        <Typography variant=\"caption\" color=\"white\">\n                            {participant.identity} {isLocal && '(你)'}\n                        </Typography>\n                    </Grid>\n\n                    {/* 本地麦克风控制 */}\n                    {isLocal && (\n                        <Grid item>\n                            <IconButton\n                                size=\"small\"\n                                onClick={handleLocalMuteToggle}\n                                color={isMuted ? 'error' : 'primary'}\n                                sx={{ color: 'white' }}\n                                title={isMuted ? '取消静音' : '静音'}\n                            >\n                                {isMuted ? <MicOffIcon /> : <MicIcon />}\n                            </IconButton>\n                        </Grid>\n                    )}\n\n                    {/* 本地视频控制 */}\n                    {isLocal && (\n                        <Grid item>\n                            <IconButton\n                                size=\"small\"\n                                onClick={handleLocalVideoToggle}\n                                color={isVideoEnabled ? 'primary' : 'error'}\n                                sx={{ color: 'white' }}\n                                title={isVideoEnabled ? '关闭摄像头' : '开启摄像头'}\n                            >\n                                {isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\n                            </IconButton>\n                        </Grid>\n                    )}\n                </Grid>\n            </Box>\n        );\n    }, [isMuted, isVideoEnabled, getEffectiveMediaState, handleToggleAudio, handleToggleVideo, handleLocalMuteToggle, handleLocalVideoToggle]);\n\n    // 渲染加载状态\n    if (isConnecting) {\n        return (\n            <Box sx={{\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                height: '100%',\n                p: 3\n            }}>\n                <CircularProgress />\n                <Typography variant=\"body1\" sx={{ mt: 2 }}>正在连接会议...</Typography>\n            </Box>\n        );\n    }\n\n    // 渲染错误状态\n    if (error) {\n        return (\n            <Alert severity=\"error\" sx={{ m: 2 }}>\n                <Typography variant=\"body1\">{error}</Typography>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={connectToRoom}\n                    startIcon={<RefreshIcon />}\n                    sx={{ mt: 1 }}\n                >\n                    重试连接\n                </Button>\n            </Alert>\n        );\n    }\n\n    // 渲染主界面\n    function renderMainContent() {\n        // 如果已经连接，显示会议界面\n        if (hasConnected && roomRef.current) {\n            return (\n                <Box className={className} sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>\n                    <Box sx={{ flex: 1, overflow: 'auto', p: 2 }}>\n                        <Grid container spacing={2}>\n                            <Grid item xs={12} md={participants.length === 0 ? 12 : 6}>\n                                {renderParticipant(roomRef.current.localParticipant, true)}\n                            </Grid>\n                            {participants.map(function (participant) {\n                                return (\n                                    <Grid item xs={12} md={6} key={participant.identity}>\n                                        {renderParticipant(participant, false)}\n                                    </Grid>\n                                );\n                            })}\n                        </Grid>\n                    </Box>\n                    {/* 底部控制栏 */}\n                    <Box sx={{\n                        p: 2,\n                        borderTop: '1px solid',\n                        borderColor: 'divider',\n                        display: 'flex',\n                        justifyContent: 'center',\n                        gap: 2\n                    }}>\n                        <Button\n                            variant=\"contained\"\n                            color={!globalMediaState.isAudioEnabled ? 'error' : 'primary'}\n                            onClick={toggleMute}\n                            startIcon={!globalMediaState.isAudioEnabled ? <MicOffIcon /> : <MicIcon />}\n                        >\n                            {!globalMediaState.isAudioEnabled ? '取消静音' : '静音'}\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            color={!globalMediaState.isVideoEnabled ? 'error' : 'primary'}\n                            onClick={toggleVideo}\n                            startIcon={globalMediaState.isVideoEnabled ? <VideoIcon /> : <VideoOffIcon />}\n                        >\n                            {globalMediaState.isVideoEnabled ? '关闭摄像头' : '开启摄像头'}\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"error\"\n                            onClick={leaveMeeting}\n                            startIcon={<CallEndIcon />}\n                        >\n                            离开会议\n                        </Button>\n                    </Box>\n                </Box>\n            );\n        }\n\n        // 未连接时显示连接界面\n        return (\n            <Box className={className} sx={{\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                alignItems: 'center',\n                justifyContent: 'center',\n                p: 3\n            }}>\n                <Typography variant=\"h6\" gutterBottom>\n                    准备加入会议\n                </Typography>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={connectToRoom}\n                    disabled={isConnecting}\n                    startIcon={<VideoIcon />}\n                    sx={{ mt: 2 }}\n                >\n                    加入会议\n                    {isConnecting && (\n                        <CircularProgress\n                            size={16}\n                            sx={{\n                                color: 'inherit',\n                                ml: 1\n                            }}\n                        />\n                    )}\n                </Button>\n            </Box>\n        );\n    }\n\n    // 渲染组件\n    return (\n        <Box ref={ref} sx={sx} style={style}>\n            {error ? (\n                <Alert\n                    severity=\"error\"\n                    action={\n                        <Button\n                            color=\"inherit\"\n                            size=\"small\"\n                            onClick={connectToRoom}\n                        >\n                            重试\n                        </Button>\n                    }\n                >\n                    {error}\n                </Alert>\n            ) : (\n                renderMainContent()\n            )}\n        </Box>\n    );\n}\n\n// 使用 forwardRef 导出组件\nconst MeetingRoom = forwardRef(MeetingRoomComponent);\nMeetingRoom.displayName = 'MeetingRoom';\n\nexport { MeetingRoom };","import React from 'react';\nimport { Box, AppBar, Toolbar, Typography, Container } from '@mui/material';\nimport { mainModel } from '../libs/mc/main/MainModel';\nimport { MeetingRoom } from '@im/livekit';\n\nconst HomePage: React.FC = () => {\n  return (\n    <Box>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Home\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container>\n        <Box sx={{ my: 2 }}>\n          <MeetingRoom\n            roomName=\"test-room\"\n            userName={`user-${Math.random().toString(36).substring(2, 8)}`}\n            livekitConfig={mainModel.data.livekit}\n          />\n        </Box>\n      </Container>\n    </Box>\n  );\n};\n\nexport default HomePage;\n","\n    (window.__NEXT_P = window.__NEXT_P || []).push([\n      \"/\",\n      function () {\n        return require(\"private-next-pages/index.tsx\");\n      }\n    ]);\n    if(module.hot) {\n      module.hot.dispose(function () {\n        window.__NEXT_P.push([\"/\"])\n      });\n    }\n  "],"names":["roomName","error","isMuted","isVideoEnabled","handleTrackSubscribed","React","Box","AppBar","Toolbar","Typography","Container","mainModel","MeetingRoom","HomePage","position","variant","component","sx","flexGrow","my","userName","Math","random","toString","substring","livekitConfig","data","livekit"],"sourceRoot":"","ignoreList":[]}