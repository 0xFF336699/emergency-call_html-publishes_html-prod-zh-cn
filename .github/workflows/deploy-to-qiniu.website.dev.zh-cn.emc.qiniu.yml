# 优化方案：推送所有文件到七牛，HTML最后推送，带变更检测
name: Deploy all files to Qiniu with change detection

on:
  push:
    branches:
      - main

jobs:
  deploy-all-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # 获取更多提交历史以便比较变更
          fetch-depth: 2

      - name: Setup qshell and detect changes
        env:
          QINIU_BUCKET_NAME: ${{ secrets.QINIU_BUCKET_NAME }}
          QINIU_ACCESS_KEY: ${{ secrets.QINIU_ACCESS_KEY }}
          QINIU_SECRET_KEY: ${{ secrets.QINIU_SECRET_KEY }}
          QINIU_DOMAIN: ${{ secrets.QINIU_DOMAIN }}
        run: |
          echo "Downloading and setting up qshell..."
          wget https://github.com/qiniu/qshell/releases/download/v2.16.0/qshell-v2.16.0-linux-amd64.tar.gz -O qshell.tar.gz
          tar -xvf qshell.tar.gz
          chmod +x qshell
          
          # 清除可能存在的用户配置，避免重复添加错误
          ./qshell user clean
          ./qshell account $QINIU_ACCESS_KEY $QINIU_SECRET_KEY deploy_user

          echo "Detecting file changes..."
          # 检测变更的文件（相对于上一次提交）
          if git rev-parse HEAD~1 >/dev/null 2>&1; then
            # 获取变更的文件列表
            git diff --name-only HEAD~1 HEAD -- docs/ > changed_files.txt
            echo "Changed files:"
            cat changed_files.txt
            
            # 如果没有变更，跳过部署
            if [ ! -s changed_files.txt ]; then
              echo "No files changed in docs/ directory. Skipping deployment."
              exit 0
            fi
          else
            echo "This is the first commit or cannot compare with previous commit."
            echo "Deploying all files..."
            find docs -type f > changed_files.txt
          fi

      - name: Upload non-HTML files to Qiniu first
        env:
          QINIU_BUCKET_NAME: ${{ secrets.QINIU_BUCKET_NAME }}
          QINIU_ACCESS_KEY: ${{ secrets.QINIU_ACCESS_KEY }}
          QINIU_SECRET_KEY: ${{ secrets.QINIU_SECRET_KEY }}
          QINIU_DOMAIN: ${{ secrets.QINIU_DOMAIN }}
        run: |
          echo "Creating temporary directory for non-HTML files..."
          TARGET_DIR="non_html_files"
          mkdir -p $TARGET_DIR
          
          # 只处理变更的非HTML文件
          changed_non_html_files=""
          while IFS= read -r filepath; do
            # 跳过HTML文件，这些将在后面处理
            if [[ "$filepath" == *.html ]]; then
              continue
            fi
            
            # 检查文件是否存在（可能被删除）
            if [ -f "$filepath" ]; then
              mkdir -p "$TARGET_DIR/$(dirname "$filepath")"
              cp "$filepath" "$TARGET_DIR/$filepath"
              changed_non_html_files="yes"
            fi
          done < changed_files.txt
          
          # 只有当有变更的非HTML文件时才上传
          if [ "$changed_non_html_files" = "yes" ] && [ "$(find "$TARGET_DIR/docs" -type f 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "Uploading changed non-HTML files..."
            cat > qupload-non-html.json << EOF
          {
              "src_dir": "$TARGET_DIR/docs",  
              "bucket": "$QINIU_BUCKET_NAME",
              "overwrite": true,
              "rescan_local": true,
              "log_level": "info",
              "check_exists": true,
              "check_hash": true
          }
          EOF
            ./qshell qupload -c 10 qupload-non-html.json
            echo "Changed non-HTML files uploaded successfully."
          else
            echo "No changed non-HTML files found to upload."
          fi

      - name: Upload HTML files to Qiniu last
        env:
          QINIU_BUCKET_NAME: ${{ secrets.QINIU_BUCKET_NAME }}
          QINIU_ACCESS_KEY: ${{ secrets.QINIU_ACCESS_KEY }}
          QINIU_SECRET_KEY: ${{ secrets.QINIU_SECRET_KEY }}
          QINIU_DOMAIN: ${{ secrets.QINIU_DOMAIN }}
        run: |
          echo "Creating temporary directory for HTML files..."
          TARGET_DIR="html_only"
          mkdir -p $TARGET_DIR
          
          # 只处理变更的HTML文件
          changed_html_files=""
          html_files_for_refresh=""
          while IFS= read -r filepath; do
            # 只处理HTML文件
            if [[ "$filepath" == *.html ]] && [ -f "$filepath" ]; then
              mkdir -p "$TARGET_DIR/$(dirname "$filepath")"
              cp "$filepath" "$TARGET_DIR/$filepath"
              changed_html_files="yes"
              # 记录需要刷新CDN的HTML文件
              echo "$filepath" >> html_files_for_refresh.txt
            fi
          done < changed_files.txt
          
          # 只有当有变更的HTML文件时才上传
          if [ "$changed_html_files" = "yes" ] && [ "$(find "$TARGET_DIR/docs" -type f 2>/dev/null | wc -l)" -gt 0 ]; then
            echo "Uploading changed HTML files..."
            cat > qupload-html.json << EOF
          {
              "src_dir": "$TARGET_DIR/docs",
              "bucket": "$QINIU_BUCKET_NAME", 
              "overwrite": true,
              "rescan_local": true,
              "log_level": "info",
              "check_exists": true,
              "check_hash": true
          }
          EOF
            ./qshell qupload -c 10 qupload-html.json
            echo "Changed HTML files uploaded successfully."
            
            # 刷新CDN缓存（只刷新变更的HTML文件对应的URL）
            echo "Refreshing CDN cache for changed HTML files..."
            > urls_to_refresh.txt
            
            if [ -f "html_files_for_refresh.txt" ]; then
              while IFS= read -r filepath; do
                # 移除docs/前缀
                clean_path=$(echo "$filepath" | sed 's/^docs\///')
                path_no_index=$(echo "$clean_path" | sed 's/index\.html$//')
                path_no_ext=$(echo "$path_no_index" | sed 's/\.html$//')
                
                # 生成带斜杠的 URL (目录)
                if [ "${path_no_index: -1}" == "/" ]; then
                  echo "${QINIU_DOMAIN}${path_no_index}" >> urls_to_refresh.txt
                fi
                
                # 生成不带斜杠的 URL (文件或目录的别名) 
                if [ "$path_no_ext" != "$path_no_index" ]; then
                   echo "${QINIU_DOMAIN}${path_no_ext}" >> urls_to_refresh.txt
                fi
                
                # 如果是根目录的index.html，刷新根域名
                if [ "$clean_path" = "index.html" ]; then
                  echo "$QINIU_DOMAIN" >> urls_to_refresh.txt
                fi
              done < html_files_for_refresh.txt
              
              # 去重
              sort -u urls_to_refresh.txt -o urls_to_refresh.txt
              
              echo "--- URLs to be refreshed ---"
              cat urls_to_refresh.txt
              
              # 执行CDN刷新
              if [ -s urls_to_refresh.txt ]; then
                echo "Executing CDN refresh..."
                ./qshell cdnrefresh -i urls_to_refresh.txt
              fi
            fi
          else
            echo "No changed HTML files found to upload."
          fi

          echo "Deployment completed successfully."
